zabbix_export:
  version: '5.2'
  date: '2021-01-23T07:26:04Z'
  groups:
    -
      name: Nginx
  templates:
    -
      template: 'Nginx VTS monitoring'
      name: 'Nginx VTS monitoring'
      groups:
        -
          name: Nginx
      applications:
        -
          name: cacheZones_info
        -
          name: CPU
        -
          name: Filesystems
        -
          name: General
        -
          name: Inventory
        -
          name: Memory
        -
          name: 'Monitoring agent'
        -
          name: 'Network interfaces'
        -
          name: nginxVTS
        -
          name: nginx_basic_info
        -
          name: Security
        -
          name: serverZones_info
        -
          name: Status
        -
          name: Storage
        -
          name: upstream_info
        -
          name: 'Web Check'
        -
          name: 'Zabbix raw items'
      items:
        -
          name: AcceptedConnections
          type: DEPENDENT
          key: AcceptedConnections
          delay: '0'
          applications:
            -
              name: nginxVTS
            -
              name: nginx_basic_info
          preprocessing:
            -
              type: JSONPATH
              parameters:
                - $.AcceptedConnections
          master_item:
            key: 'nginx_basic_info.py[{$NGINX.VTS_STATUS.SCHEME}, "{HOST.CONN}","{$NGINX.VTS_STATUS.PORT}","{$NGINX.VTS_STATUS.PATH}"]'
        -
          name: ActiveConnections
          type: DEPENDENT
          key: ActiveConnections
          delay: '0'
          applications:
            -
              name: nginxVTS
            -
              name: nginx_basic_info
          preprocessing:
            -
              type: JSONPATH
              parameters:
                - $.ActiveConnections
          master_item:
            key: 'nginx_basic_info.py[{$NGINX.VTS_STATUS.SCHEME}, "{HOST.CONN}","{$NGINX.VTS_STATUS.PORT}","{$NGINX.VTS_STATUS.PATH}"]'
        -
          name: 'Host name of Zabbix agent running'
          key: agent.hostname
          delay: 1h
          history: 7d
          trends: '0'
          value_type: CHAR
          applications:
            -
              name: 'Monitoring agent'
          preprocessing:
            -
              type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 1d
        -
          name: 'Zabbix agent ping'
          key: agent.ping
          delay: 10s
          history: 7d
          description: 'The agent always returns 1 for this item. It could be used in combination with nodata() for availability check.'
          applications:
            -
              name: 'Monitoring agent'
          valuemap:
            name: 'Zabbix agent ping status'
        -
          name: 'Version of Zabbix agent running'
          key: agent.version
          delay: 1h
          history: 7d
          trends: '0'
          value_type: CHAR
          applications:
            -
              name: 'Monitoring agent'
          preprocessing:
            -
              type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 1d
        -
          name: basic_info_javascript
          type: HTTP_AGENT
          key: basic_info_javascript
          trends: '0'
          value_type: TEXT
          preprocessing:
            -
              type: JAVASCRIPT
              parameters:
                - |
                  a = JSON.parse(value)
                  basic_info = {
                          HostName: a.hostName,
                          nginxVersion: a.nginxVersion,
                          ActiveConnections: a.connections.active,
                          ReadingConnections: a.connections.reading,
                          WritingConnections: a.connections.writing,
                          WaitingConnections: a.connections.waiting,
                          AcceptedConnections: a.connections.accepted,
                          HandledConnections: a.connections.handled,
                          RequestsConnections: a.connections.requests
                  };
                  return JSON.stringify(basic_info );
          url: '{$NGINX.VTS_STATUS.SCHEME}://{HOST.CONN}:{$NGINX.VTS_STATUS.PORT}/{$NGINX.VTS_STATUS.PATH}/format/json'
        -
          name: HandledConnections
          type: DEPENDENT
          key: HandledConnections
          delay: '0'
          applications:
            -
              name: nginxVTS
            -
              name: nginx_basic_info
          preprocessing:
            -
              type: JSONPATH
              parameters:
                - $.HandledConnections
          master_item:
            key: 'nginx_basic_info.py[{$NGINX.VTS_STATUS.SCHEME}, "{HOST.CONN}","{$NGINX.VTS_STATUS.PORT}","{$NGINX.VTS_STATUS.PATH}"]'
        -
          name: 'Maximum number of open file descriptors'
          key: kernel.maxfiles
          delay: 1h
          history: 7d
          description: 'It could be increased by using sysctrl utility or modifying file /etc/sysctl.conf.'
          applications:
            -
              name: General
          preprocessing:
            -
              type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 1d
          triggers:
            -
              expression: '{last()}<{$KERNEL.MAXFILES.MIN}'
              name: 'Configured max number of open filedescriptors is too low (< {$KERNEL.MAXFILES.MIN})'
              priority: INFO
        -
          name: 'Maximum number of processes'
          key: kernel.maxproc
          delay: 1h
          history: 7d
          description: 'It could be increased by using sysctrl utility or modifying file /etc/sysctl.conf.'
          applications:
            -
              name: General
          preprocessing:
            -
              type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 1d
          triggers:
            -
              expression: '{last()}<{$KERNEL.MAXPROC.MIN}'
              name: 'Configured max number of processes is too low (< {$KERNEL.MAXPROC.MIN})'
              priority: INFO
              dependencies:
                -
                  name: 'Getting closer to process limit (over 80% used)'
                  expression: '{Nginx VTS monitoring:proc.num.last()}/{Nginx VTS monitoring:kernel.maxproc.last()}*100>80'
        -
          name: nginxVersion
          type: DEPENDENT
          key: nginxVersion
          delay: '0'
          trends: '0'
          value_type: TEXT
          applications:
            -
              name: nginxVTS
            -
              name: nginx_basic_info
          preprocessing:
            -
              type: JSONPATH
              parameters:
                - $.nginxVersion
          master_item:
            key: 'nginx_basic_info.py[{$NGINX.VTS_STATUS.SCHEME}, "{HOST.CONN}","{$NGINX.VTS_STATUS.PORT}","{$NGINX.VTS_STATUS.PATH}"]'
        -
          name: Basic_Info
          type: EXTERNAL
          key: 'nginx_basic_info.py[{$NGINX.VTS_STATUS.SCHEME}, "{HOST.CONN}","{$NGINX.VTS_STATUS.PORT}","{$NGINX.VTS_STATUS.PATH}"]'
          trends: '0'
          value_type: TEXT
          applications:
            -
              name: nginxVTS
            -
              name: nginx_basic_info
          triggers:
            -
              expression: '{nodata(5m)}=1'
              name: 'Nginx {HOST.CONN} is Down'
              priority: DISASTER
              type: MULTIPLE
        -
          name: 'Number of processes'
          key: proc.num
          history: 7d
          applications:
            -
              name: General
        -
          name: 'Number of running processes'
          key: 'proc.num[,,run]'
          history: 7d
          applications:
            -
              name: General
        -
          name: ReadingConnections
          type: DEPENDENT
          key: ReadingConnections
          delay: '0'
          applications:
            -
              name: nginxVTS
            -
              name: nginx_basic_info
          preprocessing:
            -
              type: JSONPATH
              parameters:
                - $.ReadingConnections
          master_item:
            key: 'nginx_basic_info.py[{$NGINX.VTS_STATUS.SCHEME}, "{HOST.CONN}","{$NGINX.VTS_STATUS.PORT}","{$NGINX.VTS_STATUS.PATH}"]'
        -
          name: 'Total Number of Requests'
          type: DEPENDENT
          key: RequestsConnections
          delay: '0'
          applications:
            -
              name: nginxVTS
            -
              name: nginx_basic_info
          preprocessing:
            -
              type: JSONPATH
              parameters:
                - $.RequestsConnections
          master_item:
            key: 'nginx_basic_info.py[{$NGINX.VTS_STATUS.SCHEME}, "{HOST.CONN}","{$NGINX.VTS_STATUS.PORT}","{$NGINX.VTS_STATUS.PATH}"]'
          triggers:
            -
              expression: '{delta(60m)}<100000'
              name: 'Total number of requests is less than 100000 in last 1 hour'
              priority: HIGH
        -
          name: 'Requests per Second'
          type: DEPENDENT
          key: Requests_per_Second
          delay: '0'
          applications:
            -
              name: nginxVTS
            -
              name: nginx_basic_info
          preprocessing:
            -
              type: JSONPATH
              parameters:
                - $.RequestsConnections
            -
              type: CHANGE_PER_SECOND
              parameters:
                - ''
          master_item:
            key: 'nginx_basic_info.py[{$NGINX.VTS_STATUS.SCHEME}, "{HOST.CONN}","{$NGINX.VTS_STATUS.PORT}","{$NGINX.VTS_STATUS.PATH}"]'
        -
          name: 'System boot time'
          key: system.boottime
          delay: 15m
          history: 7d
          units: unixtime
          applications:
            -
              name: General
          preprocessing:
            -
              type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 1h
        -
          name: 'Interrupts per second'
          key: system.cpu.intr
          history: 7d
          value_type: FLOAT
          applications:
            -
              name: CPU
          preprocessing:
            -
              type: CHANGE_PER_SECOND
              parameters:
                - ''
        -
          name: 'Load average (1m avg)'
          key: 'system.cpu.load[all,avg1]'
          history: 7d
          value_type: FLOAT
          applications:
            -
              name: CPU
        -
          name: 'Load average (5m avg)'
          key: 'system.cpu.load[all,avg5]'
          history: 7d
          value_type: FLOAT
          applications:
            -
              name: CPU
        -
          name: 'Load average (15m avg)'
          key: 'system.cpu.load[all,avg15]'
          history: 7d
          value_type: FLOAT
          applications:
            -
              name: CPU
        -
          name: 'Number of CPUs'
          key: system.cpu.num
          history: 7d
          applications:
            -
              name: CPU
          preprocessing:
            -
              type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 1d
        -
          name: 'Context switches per second'
          key: system.cpu.switches
          history: 7d
          value_type: FLOAT
          applications:
            -
              name: CPU
          preprocessing:
            -
              type: CHANGE_PER_SECOND
              parameters:
                - ''
        -
          name: 'CPU utilization'
          type: DEPENDENT
          key: system.cpu.util
          delay: '0'
          history: 7d
          value_type: FLOAT
          units: '%'
          description: 'CPU utilization in %'
          applications:
            -
              name: CPU
          preprocessing:
            -
              type: JAVASCRIPT
              parameters:
                - |
                  //Calculate utilization
                  return (100 - value)
          master_item:
            key: 'system.cpu.util[,idle]'
          triggers:
            -
              expression: '{min(5m)}>{$CPU.UTIL.CRIT}'
              name: 'High CPU utilization (over {$CPU.UTIL.CRIT}% for 5m)'
              opdata: 'Current utilization: {ITEM.LASTVALUE1}'
              priority: WARNING
              description: 'CPU utilization is too high. The system might be slow to respond.'
              dependencies:
                -
                  name: 'Load average is too high (per CPU load over {$LOAD_AVG_PER_CPU.MAX.WARN} for 5m)'
                  expression: |
                    {Nginx VTS monitoring:system.cpu.load[all,avg1].min(5m)}/{Nginx VTS monitoring:system.cpu.num.last()}>{$LOAD_AVG_PER_CPU.MAX.WARN}
                    and {Nginx VTS monitoring:system.cpu.load[all,avg5].last()}>0
                    and {Nginx VTS monitoring:system.cpu.load[all,avg15].last()}>0
        -
          name: 'CPU guest time'
          key: 'system.cpu.util[,guest]'
          history: 7d
          value_type: FLOAT
          units: '%'
          description: 'Guest  time (time  spent  running  a  virtual  CPU  for  a  guest  operating  system)'
          applications:
            -
              name: CPU
        -
          name: 'CPU guest nice time'
          key: 'system.cpu.util[,guest_nice]'
          history: 7d
          value_type: FLOAT
          units: '%'
          description: 'Time spent running a niced guest (virtual CPU for guest operating systems under the control of the Linux kernel)'
          applications:
            -
              name: CPU
        -
          name: 'CPU idle time'
          key: 'system.cpu.util[,idle]'
          history: 7d
          value_type: FLOAT
          units: '%'
          description: 'The time the CPU has spent doing nothing.'
          applications:
            -
              name: CPU
        -
          name: 'CPU interrupt time'
          key: 'system.cpu.util[,interrupt]'
          history: 7d
          value_type: FLOAT
          units: '%'
          description: 'The amount of time the CPU has been servicing hardware interrupts.'
          applications:
            -
              name: CPU
        -
          name: 'CPU iowait time'
          key: 'system.cpu.util[,iowait]'
          history: 7d
          value_type: FLOAT
          units: '%'
          description: 'Amount of time the CPU has been waiting for I/O to complete.'
          applications:
            -
              name: CPU
          triggers:
            -
              expression: '{last()}>{$WAITING_CONNECTIONS_CRITICAL}'
              name: 'CPU iowait time is more than {$WAITING_CONNECTIONS_CRITICAL}'
              priority: HIGH
        -
          name: 'CPU nice time'
          key: 'system.cpu.util[,nice]'
          history: 7d
          value_type: FLOAT
          units: '%'
          description: 'The time the CPU has spent running users'' processes that have been niced.'
          applications:
            -
              name: CPU
        -
          name: 'CPU softirq time'
          key: 'system.cpu.util[,softirq]'
          history: 7d
          value_type: FLOAT
          units: '%'
          description: 'The amount of time the CPU has been servicing software interrupts.'
          applications:
            -
              name: CPU
        -
          name: 'CPU steal time'
          key: 'system.cpu.util[,steal]'
          history: 7d
          value_type: FLOAT
          units: '%'
          description: 'The amount of CPU ''stolen'' from this virtual machine by the hypervisor for other tasks (such as running another virtual machine).'
          applications:
            -
              name: CPU
        -
          name: 'CPU system time'
          key: 'system.cpu.util[,system]'
          history: 7d
          value_type: FLOAT
          units: '%'
          description: 'The time the CPU has spent running the kernel and its processes.'
          applications:
            -
              name: CPU
        -
          name: 'CPU user time'
          key: 'system.cpu.util[,user]'
          history: 7d
          value_type: FLOAT
          units: '%'
          description: 'The time the CPU has spent running users'' processes that are not niced.'
          applications:
            -
              name: CPU
        -
          name: 'System name'
          key: system.hostname
          delay: 1h
          history: 2w
          trends: '0'
          value_type: CHAR
          description: 'System host name.'
          inventory_link: NAME
          applications:
            -
              name: General
          preprocessing:
            -
              type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 1h
          triggers:
            -
              expression: '{diff()}=1 and {strlen()}>0'
              name: 'System name has changed (new name: {ITEM.VALUE})'
              priority: INFO
              description: 'System name has changed. Ack to close.'
              manual_close: 'YES'
        -
          name: 'System local time'
          key: system.localtime
          history: 7d
          units: unixtime
          description: 'System local time of the host.'
          applications:
            -
              name: General
          triggers:
            -
              expression: '{fuzzytime({$SYSTEM.FUZZYTIME.MAX})}=0'
              name: 'System time is out of sync (diff with Zabbix server > {$SYSTEM.FUZZYTIME.MAX}s)'
              priority: WARNING
              description: 'The host system time is different from the Zabbix server time.'
              manual_close: 'YES'
        -
          name: 'Operating system architecture'
          key: system.sw.arch
          delay: 1h
          history: 2w
          trends: '0'
          value_type: CHAR
          description: 'Operating system architecture of the host.'
          applications:
            -
              name: Inventory
          preprocessing:
            -
              type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 1d
        -
          name: 'Operating system'
          key: system.sw.os
          delay: 1h
          history: 2w
          trends: '0'
          value_type: CHAR
          inventory_link: OS
          applications:
            -
              name: Inventory
          preprocessing:
            -
              type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 1d
          triggers:
            -
              expression: '{diff()}=1 and {strlen()}>0'
              recovery_mode: NONE
              name: 'Operating system description has changed'
              priority: INFO
              description: 'Operating system description has changed. Possible reasons that system has been updated or replaced. Ack to close.'
              manual_close: 'YES'
              dependencies:
                -
                  name: 'System name has changed (new name: {ITEM.VALUE})'
                  expression: '{Nginx VTS monitoring:system.hostname.diff()}=1 and {Nginx VTS monitoring:system.hostname.strlen()}>0'
        -
          name: 'Software installed'
          key: system.sw.packages
          delay: 1h
          history: 2w
          trends: '0'
          value_type: TEXT
          applications:
            -
              name: Inventory
          preprocessing:
            -
              type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 1d
        -
          name: 'Swap-in pages/s'
          key: 'system.swap.in[,pages]'
          description: 'Pages moved from swap to memory'
          applications:
            -
              name: Memory
          preprocessing:
            -
              type: CHANGE_PER_SECOND
              parameters:
                - ''
          triggers:
            -
              expression: '{min(2m)}>150'
              name: 'High swap-in rate'
              priority: WARNING
        -
          name: 'Swap-out pages/s'
          key: 'system.swap.out[,pages]'
          description: 'Pages moved from memory to swap'
          applications:
            -
              name: Memory
          preprocessing:
            -
              type: CHANGE_PER_SECOND
              parameters:
                - ''
        -
          name: 'Free swap space'
          key: 'system.swap.size[,free]'
          history: 7d
          units: B
          description: 'The free space of swap volume/file in bytes.'
          applications:
            -
              name: Memory
        -
          name: 'Free swap space in %'
          key: 'system.swap.size[,pfree]'
          history: 7d
          value_type: FLOAT
          units: '%'
          description: 'The free space of swap volume/file in percent.'
          applications:
            -
              name: Memory
        -
          name: 'Total swap space'
          key: 'system.swap.size[,total]'
          history: 7d
          units: B
          description: 'The total space of swap volume/file in bytes.'
          applications:
            -
              name: Memory
        -
          name: 'System description'
          key: system.uname
          delay: 1h
          history: 2w
          trends: '0'
          value_type: CHAR
          description: 'The information as normally returned by ''uname -a''.'
          applications:
            -
              name: General
          preprocessing:
            -
              type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 1d
        -
          name: 'System uptime'
          key: system.uptime
          delay: 30s
          history: 2w
          trends: 0d
          units: uptime
          description: 'System uptime in ''N days, hh:mm:ss'' format.'
          applications:
            -
              name: Status
          triggers:
            -
              expression: '{last()}<10m'
              name: '{HOST.NAME} has been restarted (uptime < 10m)'
              priority: WARNING
              description: 'The host uptime is less than 10 minutes'
              manual_close: 'YES'
        -
          name: 'Number of logged in users'
          key: system.users.num
          history: 7d
          description: 'Number of users who are currently logged in.'
          applications:
            -
              name: General
        -
          name: Uptime
          type: DEPENDENT
          key: Uptime
          delay: '0'
          trends: '0'
          value_type: TEXT
          applications:
            -
              name: nginxVTS
            -
              name: nginx_basic_info
          preprocessing:
            -
              type: JSONPATH
              parameters:
                - $.Uptime
          master_item:
            key: 'nginx_basic_info.py[{$NGINX.VTS_STATUS.SCHEME}, "{HOST.CONN}","{$NGINX.VTS_STATUS.PORT}","{$NGINX.VTS_STATUS.PATH}"]'
        -
          name: 'Checksum of /etc/passwd'
          key: 'vfs.file.cksum[/etc/passwd]'
          history: 7d
          trends: '0'
          value_type: CHAR
          applications:
            -
              name: Security
          preprocessing:
            -
              type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 1h
          triggers:
            -
              expression: '{diff()}>0'
              name: '/etc/passwd has been changed'
              priority: AVERAGE
              manual_close: 'YES'
              dependencies:
                -
                  name: 'Operating system description has changed'
                  expression: '{Nginx VTS monitoring:system.sw.os.diff()}=1 and {Nginx VTS monitoring:system.sw.os.strlen()}>0'
                -
                  name: 'System name has changed (new name: {ITEM.VALUE})'
                  expression: '{Nginx VTS monitoring:system.hostname.diff()}=1 and {Nginx VTS monitoring:system.hostname.strlen()}>0'
        -
          name: 'Get /proc/diskstats'
          key: 'vfs.file.contents[/proc/diskstats]'
          history: 1h
          trends: '0'
          value_type: TEXT
          description: 'Get contents of /proc/diskstats for discovery and disk stats.'
          applications:
            -
              name: 'Zabbix raw items'
          preprocessing:
            -
              type: JAVASCRIPT
              parameters:
                - |
                  var parsed = value.split("\n").reduce(function(acc, x, i) {
                    parts = x.trim().split(/ +/)
                    acc["values"][parts[2]] = parts
                    acc["lld"].push({"{#DEVNAME}":parts[2]})
                    return acc;
                  }, {"values":{}, "lld": []});
                  
                  return JSON.stringify(parsed);
        -
          name: 'Available memory'
          key: 'vm.memory.size[available]'
          history: 7d
          units: B
          description: 'Available memory, in Linux, available = free + buffers + cache. On other platforms calculation may vary. See also: https://www.zabbix.com/documentation/current/manual/appendix/items/vm.memory.size_params'
          applications:
            -
              name: Memory
        -
          name: 'Memory utilization'
          key: 'vm.memory.size[pavailable]'
          history: 7d
          value_type: FLOAT
          units: '%'
          description: 'Memory used percentage is calculated as (100-pavailable)'
          applications:
            -
              name: Memory
          preprocessing:
            -
              type: JAVASCRIPT
              parameters:
                - 'return (100-value);'
          triggers:
            -
              expression: '{min(5m)}>{$MEMORY.UTIL.MAX}'
              name: 'High memory utilization ( >{$MEMORY.UTIL.MAX}% for 5m)'
              priority: AVERAGE
              description: 'The system is running out of free memory.'
              dependencies:
                -
                  name: 'Lack of available memory ( < {$MEMORY.AVAILABLE.MIN} of {ITEM.VALUE2})'
                  expression: '{Nginx VTS monitoring:vm.memory.size[available].min(5m)}<{$MEMORY.AVAILABLE.MIN} and {Nginx VTS monitoring:vm.memory.size[total].last()}>0'
        -
          name: 'Total memory'
          key: 'vm.memory.size[total]'
          history: 7d
          units: B
          description: 'Total memory in Bytes'
          applications:
            -
              name: Memory
        -
          name: WaitingConnections
          type: DEPENDENT
          key: WaitingConnections
          delay: '0'
          applications:
            -
              name: nginxVTS
            -
              name: nginx_basic_info
          preprocessing:
            -
              type: JSONPATH
              parameters:
                - $.WaitingConnections
          master_item:
            key: 'nginx_basic_info.py[{$NGINX.VTS_STATUS.SCHEME}, "{HOST.CONN}","{$NGINX.VTS_STATUS.PORT}","{$NGINX.VTS_STATUS.PATH}"]'
          triggers:
            -
              expression: '{last()}>{$WAITING_CONNECTIONS_CRITICAL}'
              name: 'Number of Waiting Connections is more than {$WAITING_CONNECTIONS_CRITICAL}'
              priority: DISASTER
        -
          name: 'Zabbix agent availability'
          type: INTERNAL
          key: 'zabbix[host,agent,available]'
          history: 7d
          description: 'Monitoring agent availability status'
          applications:
            -
              name: Status
          valuemap:
            name: zabbix.host.available
          triggers:
            -
              expression: '{max({$AGENT.TIMEOUT})}=0'
              name: 'Zabbix agent is not available (for {$AGENT.TIMEOUT})'
              priority: AVERAGE
              description: 'For passive only agents, host availability is used with {$AGENT.TIMEOUT} as time threshold.'
              manual_close: 'YES'
      discovery_rules:
        -
          name: 'Network interface discovery'
          key: net.if.discovery
          delay: 1h
          filter:
            evaltype: AND
            conditions:
              -
                macro: '{#IFNAME}'
                value: '{$NET.IF.IFNAME.NOT_MATCHES}'
                operator: NOT_MATCHES_REGEX
                formulaid: A
              -
                macro: '{#IFNAME}'
                value: '{$NET.IF.IFNAME.MATCHES}'
                formulaid: B
          description: 'Discovery of network interfaces.'
          item_prototypes:
            -
              name: 'Interface {#IFNAME}: Inbound packets discarded'
              key: 'net.if.in["{#IFNAME}",dropped]'
              delay: 3m
              history: 7d
              application_prototypes:
                -
                  name: 'Interface {#IFNAME}'
              preprocessing:
                -
                  type: CHANGE_PER_SECOND
                  parameters:
                    - ''
            -
              name: 'Interface {#IFNAME}: Inbound packets with errors'
              key: 'net.if.in["{#IFNAME}",errors]'
              delay: 3m
              history: 7d
              application_prototypes:
                -
                  name: 'Interface {#IFNAME}'
              preprocessing:
                -
                  type: CHANGE_PER_SECOND
                  parameters:
                    - ''
            -
              name: 'Interface {#IFNAME}: Bits received'
              key: 'net.if.in["{#IFNAME}"]'
              delay: 3m
              history: 7d
              units: bps
              application_prototypes:
                -
                  name: 'Interface {#IFNAME}'
              preprocessing:
                -
                  type: CHANGE_PER_SECOND
                  parameters:
                    - ''
                -
                  type: MULTIPLIER
                  parameters:
                    - '8'
              trigger_prototypes:
                -
                  expression: '{max(10m)}>{$INBOUND_TRAFFIC_CRIT}'
                  name: 'Inbound Traffic is more than {$INBOUND_TRAFFIC_CRIT} fbps'
                  priority: DISASTER
            -
              name: 'Interface {#IFNAME}: Outbound packets discarded'
              key: 'net.if.out["{#IFNAME}",dropped]'
              delay: 3m
              history: 7d
              application_prototypes:
                -
                  name: 'Interface {#IFNAME}'
              preprocessing:
                -
                  type: CHANGE_PER_SECOND
                  parameters:
                    - ''
            -
              name: 'Interface {#IFNAME}: Outbound packets with errors'
              key: 'net.if.out["{#IFNAME}",errors]'
              delay: 3m
              history: 7d
              application_prototypes:
                -
                  name: 'Interface {#IFNAME}'
              preprocessing:
                -
                  type: CHANGE_PER_SECOND
                  parameters:
                    - ''
            -
              name: 'Interface {#IFNAME}: Bits sent'
              key: 'net.if.out["{#IFNAME}"]'
              delay: 3m
              history: 7d
              units: bps
              application_prototypes:
                -
                  name: 'Interface {#IFNAME}'
              preprocessing:
                -
                  type: CHANGE_PER_SECOND
                  parameters:
                    - ''
                -
                  type: MULTIPLIER
                  parameters:
                    - '8'
              trigger_prototypes:
                -
                  expression: '{max(10m)}>{$OUTBOUND_TRAFFIC_CRIT}'
                  name: 'Outbound Traffic is more than {$OUTBOUND_TRAFFIC_CRIT} bps'
                  priority: DISASTER
            -
              name: 'Interface {#IFNAME}: Operational status'
              key: 'vfs.file.contents["/sys/class/net/{#IFNAME}/operstate"]'
              history: 7d
              trends: '0'
              description: |
                Indicates the interface RFC2863 operational state as a string.
                Possible values are:"unknown", "notpresent", "down", "lowerlayerdown", "testing","dormant", "up".
                Reference: https://www.kernel.org/doc/Documentation/ABI/testing/sysfs-class-net
              application_prototypes:
                -
                  name: 'Interface {#IFNAME}'
              valuemap:
                name: 'IF-MIB::ifOperStatus'
              preprocessing:
                -
                  type: JAVASCRIPT
                  parameters:
                    - |
                      var newvalue;
                      switch(value) {
                        case "up":
                          newvalue = 1;
                          break;
                        case "down":
                          newvalue = 2;
                          break;
                        case "testing":
                          newvalue = 4;
                          break;
                        case "unknown":
                          newvalue = 5;
                          break;
                        case "dormant":
                          newvalue = 6;
                          break;
                        case "notPresent":
                          newvalue = 7;
                          break;
                        default:
                          newvalue = "Problem parsing interface operstate in JS";
                      }
                      return newvalue;
              trigger_prototypes:
                -
                  expression: '{$IFCONTROL:"{#IFNAME}"}=1 and ({last()}=2 and {diff()}=1)'
                  recovery_mode: RECOVERY_EXPRESSION
                  recovery_expression: '{last()}<>2'
                  name: 'Interface {#IFNAME}: Link down'
                  opdata: 'Current state: {ITEM.LASTVALUE1}'
                  priority: AVERAGE
                  description: |
                    This trigger expression works as follows:
                    1. Can be triggered if operations status is down.
                    2. {$IFCONTROL:"{#IFNAME}"}=1 - user can redefine Context macro to value - 0. That marks this interface as not important. No new trigger will be fired if this interface is down.
                    3. {TEMPLATE_NAME:METRIC.diff()}=1) - trigger fires only if operational status was up(1) sometime before. (So, do not fire 'ethernal off' interfaces.)
                    
                    WARNING: if closed manually - won't fire again on next poll, because of .diff.
                  manual_close: 'YES'
            -
              name: 'Interface {#IFNAME}: Interface type'
              key: 'vfs.file.contents["/sys/class/net/{#IFNAME}/type"]'
              delay: 1h
              history: 7d
              trends: 0d
              description: |
                Indicates the interface protocol type as a decimal value.
                See include/uapi/linux/if_arp.h for all possible values.
                Reference: https://www.kernel.org/doc/Documentation/ABI/testing/sysfs-class-net
              application_prototypes:
                -
                  name: 'Interface {#IFNAME}'
              valuemap:
                name: 'Linux::Interface protocol types'
              preprocessing:
                -
                  type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 1d
          trigger_prototypes:
            -
              expression: |
                {Nginx VTS monitoring:vfs.file.contents["/sys/class/net/{#IFNAME}/type"].change()}<0 and {Nginx VTS monitoring:vfs.file.contents["/sys/class/net/{#IFNAME}/type"].last()}>0
                and
                ({Nginx VTS monitoring:vfs.file.contents["/sys/class/net/{#IFNAME}/type"].last()}=6
                or {Nginx VTS monitoring:vfs.file.contents["/sys/class/net/{#IFNAME}/type"].last()}=1)
                and
                ({Nginx VTS monitoring:vfs.file.contents["/sys/class/net/{#IFNAME}/operstate"].last()}<>2)
              recovery_mode: RECOVERY_EXPRESSION
              recovery_expression: |
                ({Nginx VTS monitoring:vfs.file.contents["/sys/class/net/{#IFNAME}/type"].change()}>0 and {Nginx VTS monitoring:vfs.file.contents["/sys/class/net/{#IFNAME}/type"].prev()}>0) or
                ({Nginx VTS monitoring:vfs.file.contents["/sys/class/net/{#IFNAME}/operstate"].last()}=2)
              name: 'Interface {#IFNAME}: Ethernet has changed to lower speed than it was before'
              opdata: 'Current reported speed: {ITEM.LASTVALUE1}'
              priority: INFO
              description: 'This Ethernet connection has transitioned down from its known maximum speed. This might be a sign of autonegotiation issues. Ack to close.'
              manual_close: 'YES'
              dependencies:
                -
                  name: 'Interface {#IFNAME}: Link down'
                  expression: '{$IFCONTROL:"{#IFNAME}"}=1 and ({Nginx VTS monitoring:vfs.file.contents["/sys/class/net/{#IFNAME}/operstate"].last()}=2 and {Nginx VTS monitoring:vfs.file.contents["/sys/class/net/{#IFNAME}/operstate"].diff()}=1)'
                  recovery_expression: '{Nginx VTS monitoring:vfs.file.contents["/sys/class/net/{#IFNAME}/operstate"].last()}<>2'
            -
              expression: |
                {Nginx VTS monitoring:net.if.in["{#IFNAME}",errors].min(5m)}>{$IF.ERRORS.WARN:"{#IFNAME}"}
                or {Nginx VTS monitoring:net.if.out["{#IFNAME}",errors].min(5m)}>{$IF.ERRORS.WARN:"{#IFNAME}"}
              recovery_mode: RECOVERY_EXPRESSION
              recovery_expression: |
                {Nginx VTS monitoring:net.if.in["{#IFNAME}",errors].max(5m)}<{$IF.ERRORS.WARN:"{#IFNAME}"}*0.8
                and {Nginx VTS monitoring:net.if.out["{#IFNAME}",errors].max(5m)}<{$IF.ERRORS.WARN:"{#IFNAME}"}*0.8
              name: 'Interface {#IFNAME}: High error rate ( > {$IF.ERRORS.WARN:"{#IFNAME}"} for 5m)'
              opdata: 'errors in: {ITEM.LASTVALUE1}, errors out: {ITEM.LASTVALUE2}'
              priority: WARNING
              description: 'Recovers when below 80% of {$IF.ERRORS.WARN:"{#IFNAME}"} threshold'
              manual_close: 'YES'
              dependencies:
                -
                  name: 'Interface {#IFNAME}: Link down'
                  expression: '{$IFCONTROL:"{#IFNAME}"}=1 and ({Nginx VTS monitoring:vfs.file.contents["/sys/class/net/{#IFNAME}/operstate"].last()}=2 and {Nginx VTS monitoring:vfs.file.contents["/sys/class/net/{#IFNAME}/operstate"].diff()}=1)'
                  recovery_expression: '{Nginx VTS monitoring:vfs.file.contents["/sys/class/net/{#IFNAME}/operstate"].last()}<>2'
          graph_prototypes:
            -
              name: 'Interface {#IFNAME}: Network traffic'
              graph_items:
                -
                  drawtype: GRADIENT_LINE
                  color: 1A7C11
                  item:
                    host: 'Nginx VTS monitoring'
                    key: 'net.if.in["{#IFNAME}"]'
                -
                  sortorder: '1'
                  drawtype: BOLD_LINE
                  color: 2774A4
                  item:
                    host: 'Nginx VTS monitoring'
                    key: 'net.if.out["{#IFNAME}"]'
                -
                  sortorder: '2'
                  color: F63100
                  yaxisside: RIGHT
                  item:
                    host: 'Nginx VTS monitoring'
                    key: 'net.if.out["{#IFNAME}",errors]'
                -
                  sortorder: '3'
                  color: A54F10
                  yaxisside: RIGHT
                  item:
                    host: 'Nginx VTS monitoring'
                    key: 'net.if.in["{#IFNAME}",errors]'
                -
                  sortorder: '4'
                  color: FC6EA3
                  yaxisside: RIGHT
                  item:
                    host: 'Nginx VTS monitoring'
                    key: 'net.if.out["{#IFNAME}",dropped]'
                -
                  sortorder: '5'
                  color: 6C59DC
                  yaxisside: RIGHT
                  item:
                    host: 'Nginx VTS monitoring'
                    key: 'net.if.in["{#IFNAME}",dropped]'
        -
          name: cacheZones_List
          type: EXTERNAL
          key: 'nginx_serverZones.py[{$NGINX.VTS_STATUS.SCHEME}, "{HOST.CONN}","{$NGINX.VTS_STATUS.PORT}","{$NGINX.VTS_STATUS.PATH}","cacheZones_List"]'
          lifetime: '0'
          item_prototypes:
            -
              name: 'number of cache {#ZONE} bypass responses'
              type: DEPENDENT
              key: 'bypass_responses[{#ZONE}]'
              delay: '0'
              applications:
                -
                  name: cacheZones_info
              preprocessing:
                -
                  type: JSONPATH
                  parameters:
                    - $.responses
                -
                  type: JSONPATH
                  parameters:
                    - $.bypass
              master_item:
                key: 'nginx_serverZones.py[{$NGINX.VTS_STATUS.SCHEME}, "{HOST.CONN}","{$NGINX.VTS_STATUS.PORT}","{$NGINX.VTS_STATUS.PATH}","cacheZones_Info", {#ZONE}]'
            -
              name: 'cache {#ZONE} Received Traffic'
              type: DEPENDENT
              key: 'cache_inBytes[{#ZONE}]'
              delay: '0'
              units: B
              applications:
                -
                  name: cacheZones_info
              preprocessing:
                -
                  type: JSONPATH
                  parameters:
                    - $.inBytes
              master_item:
                key: 'nginx_serverZones.py[{$NGINX.VTS_STATUS.SCHEME}, "{HOST.CONN}","{$NGINX.VTS_STATUS.PORT}","{$NGINX.VTS_STATUS.PATH}","cacheZones_Info", {#ZONE}]'
            -
              name: 'cache {#ZONE} Sent Traffic'
              type: DEPENDENT
              key: 'cache_outBytes[{#ZONE}]'
              delay: '0'
              units: B
              applications:
                -
                  name: cacheZones_info
              preprocessing:
                -
                  type: JSONPATH
                  parameters:
                    - $.outBytes
              master_item:
                key: 'nginx_serverZones.py[{$NGINX.VTS_STATUS.SCHEME}, "{HOST.CONN}","{$NGINX.VTS_STATUS.PORT}","{$NGINX.VTS_STATUS.PATH}","cacheZones_Info", {#ZONE}]'
            -
              name: 'cache {#ZONE} Received Traffic per Second'
              type: DEPENDENT
              key: 'cache_Rcvdps[{#ZONE}]'
              delay: '0'
              applications:
                -
                  name: cacheZones_info
              preprocessing:
                -
                  type: CHANGE_PER_SECOND
                  parameters:
                    - ''
              master_item:
                key: 'cache_inBytes[{#ZONE}]'
            -
              name: 'cache {#ZONE} Sent Traffic per Second'
              type: DEPENDENT
              key: 'cache_sentps[{#ZONE}]'
              delay: '0'
              applications:
                -
                  name: cacheZones_info
              preprocessing:
                -
                  type: CHANGE_PER_SECOND
                  parameters:
                    - ''
              master_item:
                key: 'cache_outBytes[{#ZONE}]'
            -
              name: 'number of cache {#ZONE} expired responses'
              type: DEPENDENT
              key: 'expired_responses[{#ZONE}]'
              delay: '0'
              applications:
                -
                  name: cacheZones_info
              preprocessing:
                -
                  type: JSONPATH
                  parameters:
                    - $.responses
                -
                  type: JSONPATH
                  parameters:
                    - $.expired
              master_item:
                key: 'nginx_serverZones.py[{$NGINX.VTS_STATUS.SCHEME}, "{HOST.CONN}","{$NGINX.VTS_STATUS.PORT}","{$NGINX.VTS_STATUS.PATH}","cacheZones_Info", {#ZONE}]'
            -
              name: 'Hit Rate {#ZONE}'
              type: CALCULATED
              key: 'Hit_Rate[{#ZONE}]'
              value_type: FLOAT
              units: '%'
              params: 'last(hit_responses[{#ZONE}])*100/(last(miss_responses[{#ZONE}])+last(revalidated_responses[{#ZONE}])+last(scarce_responses[{#ZONE}])+last(stale_responses[{#ZONE}])+last(updating_responses[{#ZONE}])+last(hit_responses[{#ZONE}]))'
              applications:
                -
                  name: cacheZones_info
              trigger_prototypes:
                -
                  expression: '{max(5m)}< {$HIT_RATE_CRITICAL}'
                  name: 'Hitrate for cache zone {#ZONE} is less than {$HIT_RATE_CRITICAL}'
                  priority: DISASTER
                  dependencies:
                    -
                      name: 'Total number of requests is less than 100000 in last 1 hour'
                      expression: '{Nginx VTS monitoring:RequestsConnections.delta(60m)}<100000'
                -
                  expression: '{max(5m)}< {$HIT_RATE_WARN}'
                  name: 'Hitrate for cache zone {#ZONE} is less than {$HIT_RATE_WARN}'
                  priority: DISASTER
                  dependencies:
                    -
                      name: 'Hitrate for cache zone {#ZONE} is less than {$HIT_RATE_CRITICAL}'
                      expression: '{Nginx VTS monitoring:Hit_Rate[{#ZONE}].max(5m)}< {$HIT_RATE_CRITICAL}'
                    -
                      name: 'Total number of requests is less than 100000 in last 1 hour'
                      expression: '{Nginx VTS monitoring:RequestsConnections.delta(60m)}<100000'
            -
              name: 'number of cache {#ZONE} hit responses'
              type: DEPENDENT
              key: 'hit_responses[{#ZONE}]'
              delay: '0'
              applications:
                -
                  name: cacheZones_info
              preprocessing:
                -
                  type: JSONPATH
                  parameters:
                    - $.responses
                -
                  type: JSONPATH
                  parameters:
                    - $.hit
              master_item:
                key: 'nginx_serverZones.py[{$NGINX.VTS_STATUS.SCHEME}, "{HOST.CONN}","{$NGINX.VTS_STATUS.PORT}","{$NGINX.VTS_STATUS.PATH}","cacheZones_Info", {#ZONE}]'
            -
              name: 'cache {#ZONE} maxSize'
              type: DEPENDENT
              key: 'maxSize[{#ZONE}]'
              delay: '0'
              units: B
              applications:
                -
                  name: cacheZones_info
              preprocessing:
                -
                  type: JSONPATH
                  parameters:
                    - $.maxSize
              master_item:
                key: 'nginx_serverZones.py[{$NGINX.VTS_STATUS.SCHEME}, "{HOST.CONN}","{$NGINX.VTS_STATUS.PORT}","{$NGINX.VTS_STATUS.PATH}","cacheZones_Info", {#ZONE}]'
            -
              name: 'number of cache {#ZONE} miss responses'
              type: DEPENDENT
              key: 'miss_responses[{#ZONE}]'
              delay: '0'
              applications:
                -
                  name: cacheZones_info
              preprocessing:
                -
                  type: JSONPATH
                  parameters:
                    - $.responses
                -
                  type: JSONPATH
                  parameters:
                    - $.miss
              master_item:
                key: 'nginx_serverZones.py[{$NGINX.VTS_STATUS.SCHEME}, "{HOST.CONN}","{$NGINX.VTS_STATUS.PORT}","{$NGINX.VTS_STATUS.PATH}","cacheZones_Info", {#ZONE}]'
            -
              name: '{#ZONE} cacheZones_Info'
              type: EXTERNAL
              key: 'nginx_serverZones.py[{$NGINX.VTS_STATUS.SCHEME}, "{HOST.CONN}","{$NGINX.VTS_STATUS.PORT}","{$NGINX.VTS_STATUS.PATH}","cacheZones_Info", {#ZONE}]'
              trends: '0'
              value_type: TEXT
              applications:
                -
                  name: cacheZones_info
            -
              name: 'number of cache {#ZONE} revalidated responses'
              type: DEPENDENT
              key: 'revalidated_responses[{#ZONE}]'
              delay: '0'
              applications:
                -
                  name: cacheZones_info
              preprocessing:
                -
                  type: JSONPATH
                  parameters:
                    - $.responses
                -
                  type: JSONPATH
                  parameters:
                    - $.revalidated
              master_item:
                key: 'nginx_serverZones.py[{$NGINX.VTS_STATUS.SCHEME}, "{HOST.CONN}","{$NGINX.VTS_STATUS.PORT}","{$NGINX.VTS_STATUS.PATH}","cacheZones_Info", {#ZONE}]'
            -
              name: 'number of cache {#ZONE} scarce responses'
              type: DEPENDENT
              key: 'scarce_responses[{#ZONE}]'
              delay: '0'
              applications:
                -
                  name: cacheZones_info
              preprocessing:
                -
                  type: JSONPATH
                  parameters:
                    - $.responses
                -
                  type: JSONPATH
                  parameters:
                    - $.scarce
              master_item:
                key: 'nginx_serverZones.py[{$NGINX.VTS_STATUS.SCHEME}, "{HOST.CONN}","{$NGINX.VTS_STATUS.PORT}","{$NGINX.VTS_STATUS.PATH}","cacheZones_Info", {#ZONE}]'
            -
              name: 'number of cache {#ZONE} stale responses'
              type: DEPENDENT
              key: 'stale_responses[{#ZONE}]'
              delay: '0'
              applications:
                -
                  name: cacheZones_info
              preprocessing:
                -
                  type: JSONPATH
                  parameters:
                    - $.responses
                -
                  type: JSONPATH
                  parameters:
                    - $.stale
              master_item:
                key: 'nginx_serverZones.py[{$NGINX.VTS_STATUS.SCHEME}, "{HOST.CONN}","{$NGINX.VTS_STATUS.PORT}","{$NGINX.VTS_STATUS.PATH}","cacheZones_Info", {#ZONE}]'
            -
              name: 'number of cache {#ZONE} updating responses'
              type: DEPENDENT
              key: 'updating_responses[{#ZONE}]'
              delay: '0'
              applications:
                -
                  name: cacheZones_info
              preprocessing:
                -
                  type: JSONPATH
                  parameters:
                    - $.responses
                -
                  type: JSONPATH
                  parameters:
                    - $.updating
              master_item:
                key: 'nginx_serverZones.py[{$NGINX.VTS_STATUS.SCHEME}, "{HOST.CONN}","{$NGINX.VTS_STATUS.PORT}","{$NGINX.VTS_STATUS.PATH}","cacheZones_Info", {#ZONE}]'
            -
              name: 'cache {#ZONE} usedSize'
              type: DEPENDENT
              key: 'usedSize[{#ZONE}]'
              delay: '0'
              units: B
              applications:
                -
                  name: cacheZones_info
              preprocessing:
                -
                  type: JSONPATH
                  parameters:
                    - $.usedSize
              master_item:
                key: 'nginx_serverZones.py[{$NGINX.VTS_STATUS.SCHEME}, "{HOST.CONN}","{$NGINX.VTS_STATUS.PORT}","{$NGINX.VTS_STATUS.PATH}","cacheZones_Info", {#ZONE}]'
          trigger_prototypes:
            -
              expression: '{Nginx VTS monitoring:usedSize[{#ZONE}].last()}*100/{Nginx VTS monitoring:maxSize[{#ZONE}].last()}>95'
              name: 'Cache Zone {#ZONE} Capacity is less than 5%'
              priority: HIGH
            -
              expression: '{Nginx VTS monitoring:usedSize[{#ZONE}].last()}*100/{Nginx VTS monitoring:maxSize[{#ZONE}].last()}>80'
              name: 'Cache Zone {#ZONE} Capacity is less than 20%'
              priority: HIGH
              dependencies:
                -
                  name: 'Cache Zone {#ZONE} Capacity is less than 5%'
                  expression: '{Nginx VTS monitoring:usedSize[{#ZONE}].last()}*100/{Nginx VTS monitoring:maxSize[{#ZONE}].last()}>95'
          lld_macro_paths:
            -
              lld_macro: '{#ZONE}'
              path: $.Zone
        -
          name: serverZones_List
          type: EXTERNAL
          key: 'nginx_serverZones.py[{$NGINX.VTS_STATUS.SCHEME}, "{HOST.CONN}","{$NGINX.VTS_STATUS.PORT}","{$NGINX.VTS_STATUS.PATH}","serverZones_List"]'
          lifetime: '0'
          item_prototypes:
            -
              name: 'Recieved Traffic for server zone {#ZONE}'
              type: DEPENDENT
              key: 'inBytes[{#ZONE}]'
              delay: '0'
              units: B
              applications:
                -
                  name: serverZones_info
              preprocessing:
                -
                  type: JSONPATH
                  parameters:
                    - $.inBytes
              master_item:
                key: 'nginx_serverZones.py[{$NGINX.VTS_STATUS.SCHEME}, "{HOST.CONN}","{$NGINX.VTS_STATUS.PORT}","{$NGINX.VTS_STATUS.PATH}","serverZones_Info", {#ZONE}]'
            -
              name: '{#ZONE} serverZones_Info'
              type: EXTERNAL
              key: 'nginx_serverZones.py[{$NGINX.VTS_STATUS.SCHEME}, "{HOST.CONN}","{$NGINX.VTS_STATUS.PORT}","{$NGINX.VTS_STATUS.PATH}","serverZones_Info", {#ZONE}]'
              trends: '0'
              value_type: TEXT
              applications:
                -
                  name: serverZones_info
            -
              name: 'Send Traffic for server zone {#ZONE}'
              type: DEPENDENT
              key: 'outBytes[{#ZONE}]'
              delay: '0'
              units: B
              applications:
                -
                  name: serverZones_info
              preprocessing:
                -
                  type: JSONPATH
                  parameters:
                    - $.outBytes
              master_item:
                key: 'nginx_serverZones.py[{$NGINX.VTS_STATUS.SCHEME}, "{HOST.CONN}","{$NGINX.VTS_STATUS.PORT}","{$NGINX.VTS_STATUS.PATH}","serverZones_Info", {#ZONE}]'
            -
              name: 'Recieved Traffic per Second for server zone {#ZONE}'
              type: DEPENDENT
              key: 'Rcvdps[{#ZONE}]'
              delay: '0'
              applications:
                -
                  name: serverZones_info
              preprocessing:
                -
                  type: CHANGE_PER_SECOND
                  parameters:
                    - ''
              master_item:
                key: 'inBytes[{#ZONE}]'
            -
              name: 'Total Requests for server zone {#ZONE}'
              type: DEPENDENT
              key: 'requestCounter[{#ZONE}]'
              delay: '0'
              applications:
                -
                  name: serverZones_info
              preprocessing:
                -
                  type: JSONPATH
                  parameters:
                    - $.requestCounter
              master_item:
                key: 'nginx_serverZones.py[{$NGINX.VTS_STATUS.SCHEME}, "{HOST.CONN}","{$NGINX.VTS_STATUS.PORT}","{$NGINX.VTS_STATUS.PATH}","serverZones_Info", {#ZONE}]'
            -
              name: 'responses bypass for server zone {#ZONE}'
              type: DEPENDENT
              key: 'responses_bypass[{#ZONE}]'
              delay: '0'
              applications:
                -
                  name: serverZones_info
              preprocessing:
                -
                  type: JSONPATH
                  parameters:
                    - $.responses
                -
                  type: JSONPATH
                  parameters:
                    - $.bypass
              master_item:
                key: 'nginx_serverZones.py[{$NGINX.VTS_STATUS.SCHEME}, "{HOST.CONN}","{$NGINX.VTS_STATUS.PORT}","{$NGINX.VTS_STATUS.PATH}","serverZones_Info", {#ZONE}]'
            -
              name: 'responses expired for server zone {#ZONE}'
              type: DEPENDENT
              key: 'responses_expired[{#ZONE}]'
              delay: '0'
              applications:
                -
                  name: serverZones_info
              preprocessing:
                -
                  type: JSONPATH
                  parameters:
                    - $.responses
                -
                  type: JSONPATH
                  parameters:
                    - $.expired
              master_item:
                key: 'nginx_serverZones.py[{$NGINX.VTS_STATUS.SCHEME}, "{HOST.CONN}","{$NGINX.VTS_STATUS.PORT}","{$NGINX.VTS_STATUS.PATH}","serverZones_Info", {#ZONE}]'
            -
              name: 'responses hit for server zone {#ZONE}'
              type: DEPENDENT
              key: 'responses_hit[{#ZONE}]'
              delay: '0'
              applications:
                -
                  name: serverZones_info
              preprocessing:
                -
                  type: JSONPATH
                  parameters:
                    - $.responses
                -
                  type: JSONPATH
                  parameters:
                    - $.hit
              master_item:
                key: 'nginx_serverZones.py[{$NGINX.VTS_STATUS.SCHEME}, "{HOST.CONN}","{$NGINX.VTS_STATUS.PORT}","{$NGINX.VTS_STATUS.PATH}","serverZones_Info", {#ZONE}]'
            -
              name: 'responses miss for server zone {#ZONE}'
              type: DEPENDENT
              key: 'responses_miss[{#ZONE}]'
              delay: '0'
              applications:
                -
                  name: serverZones_info
              preprocessing:
                -
                  type: JSONPATH
                  parameters:
                    - $.responses
                -
                  type: JSONPATH
                  parameters:
                    - $.miss
              master_item:
                key: 'nginx_serverZones.py[{$NGINX.VTS_STATUS.SCHEME}, "{HOST.CONN}","{$NGINX.VTS_STATUS.PORT}","{$NGINX.VTS_STATUS.PATH}","serverZones_Info", {#ZONE}]'
            -
              name: 'responses revalidated for server zone {#ZONE}'
              type: DEPENDENT
              key: 'responses_revalidated[{#ZONE}]'
              delay: '0'
              applications:
                -
                  name: serverZones_info
              preprocessing:
                -
                  type: JSONPATH
                  parameters:
                    - $.responses
                -
                  type: JSONPATH
                  parameters:
                    - $.revalidated
              master_item:
                key: 'nginx_serverZones.py[{$NGINX.VTS_STATUS.SCHEME}, "{HOST.CONN}","{$NGINX.VTS_STATUS.PORT}","{$NGINX.VTS_STATUS.PATH}","serverZones_Info", {#ZONE}]'
            -
              name: 'responses scarce for server zone {#ZONE}'
              type: DEPENDENT
              key: 'responses_scarce[{#ZONE}]'
              delay: '0'
              applications:
                -
                  name: serverZones_info
              preprocessing:
                -
                  type: JSONPATH
                  parameters:
                    - $.responses
                -
                  type: JSONPATH
                  parameters:
                    - $.scarce
              master_item:
                key: 'nginx_serverZones.py[{$NGINX.VTS_STATUS.SCHEME}, "{HOST.CONN}","{$NGINX.VTS_STATUS.PORT}","{$NGINX.VTS_STATUS.PATH}","serverZones_Info", {#ZONE}]'
            -
              name: 'responses stale for server zone {#ZONE}'
              type: DEPENDENT
              key: 'responses_stale[{#ZONE}]'
              delay: '0'
              applications:
                -
                  name: serverZones_info
              preprocessing:
                -
                  type: JSONPATH
                  parameters:
                    - $.responses
                -
                  type: JSONPATH
                  parameters:
                    - $.stale
              master_item:
                key: 'nginx_serverZones.py[{$NGINX.VTS_STATUS.SCHEME}, "{HOST.CONN}","{$NGINX.VTS_STATUS.PORT}","{$NGINX.VTS_STATUS.PATH}","serverZones_Info", {#ZONE}]'
            -
              name: 'responses updating for server zone {#ZONE}'
              type: DEPENDENT
              key: 'responses_updating[{#ZONE}]'
              delay: '0'
              applications:
                -
                  name: serverZones_info
              preprocessing:
                -
                  type: JSONPATH
                  parameters:
                    - $.responses
                -
                  type: JSONPATH
                  parameters:
                    - $.updating
              master_item:
                key: 'nginx_serverZones.py[{$NGINX.VTS_STATUS.SCHEME}, "{HOST.CONN}","{$NGINX.VTS_STATUS.PORT}","{$NGINX.VTS_STATUS.PATH}","serverZones_Info", {#ZONE}]'
            -
              name: 'Request per Second for server zone {#ZONE}'
              type: DEPENDENT
              key: 'RPS[{#ZONE}]'
              delay: '0'
              applications:
                -
                  name: serverZones_info
              preprocessing:
                -
                  type: CHANGE_PER_SECOND
                  parameters:
                    - ''
              master_item:
                key: 'requestCounter[{#ZONE}]'
            -
              name: 'Send Traffic per Second for server zone {#ZONE}'
              type: DEPENDENT
              key: 'Sentps[{#ZONE}]'
              delay: '0'
              applications:
                -
                  name: serverZones_info
              preprocessing:
                -
                  type: CHANGE_PER_SECOND
                  parameters:
                    - ''
              master_item:
                key: 'outBytes[{#ZONE}]'
            -
              name: 'responses 1xx for server zone {#ZONE}'
              type: DEPENDENT
              key: 'server_responses_1xx[{#ZONE}]'
              delay: '0'
              applications:
                -
                  name: serverZones_info
              preprocessing:
                -
                  type: JSONPATH
                  parameters:
                    - $.responses
                -
                  type: JSONPATH
                  parameters:
                    - $.1xx
              master_item:
                key: 'nginx_serverZones.py[{$NGINX.VTS_STATUS.SCHEME}, "{HOST.CONN}","{$NGINX.VTS_STATUS.PORT}","{$NGINX.VTS_STATUS.PATH}","serverZones_Info", {#ZONE}]'
            -
              name: 'responses 2xx for server zone {#ZONE}'
              type: DEPENDENT
              key: 'server_responses_2xx[{#ZONE}]'
              delay: '0'
              applications:
                -
                  name: serverZones_info
              preprocessing:
                -
                  type: JSONPATH
                  parameters:
                    - $.responses
                -
                  type: JSONPATH
                  parameters:
                    - $.2xx
              master_item:
                key: 'nginx_serverZones.py[{$NGINX.VTS_STATUS.SCHEME}, "{HOST.CONN}","{$NGINX.VTS_STATUS.PORT}","{$NGINX.VTS_STATUS.PATH}","serverZones_Info", {#ZONE}]'
            -
              name: 'responses 3xx for server zone {#ZONE}'
              type: DEPENDENT
              key: 'server_responses_3xx[{#ZONE}]'
              delay: '0'
              applications:
                -
                  name: serverZones_info
              preprocessing:
                -
                  type: JSONPATH
                  parameters:
                    - $.responses
                -
                  type: JSONPATH
                  parameters:
                    - $.3xx
              master_item:
                key: 'nginx_serverZones.py[{$NGINX.VTS_STATUS.SCHEME}, "{HOST.CONN}","{$NGINX.VTS_STATUS.PORT}","{$NGINX.VTS_STATUS.PATH}","serverZones_Info", {#ZONE}]'
            -
              name: 'responses 4xx for server zone {#ZONE}'
              type: DEPENDENT
              key: 'server_responses_4xx[{#ZONE}]'
              delay: '0'
              applications:
                -
                  name: serverZones_info
              preprocessing:
                -
                  type: JSONPATH
                  parameters:
                    - $.responses
                -
                  type: JSONPATH
                  parameters:
                    - $.4xx
              master_item:
                key: 'nginx_serverZones.py[{$NGINX.VTS_STATUS.SCHEME}, "{HOST.CONN}","{$NGINX.VTS_STATUS.PORT}","{$NGINX.VTS_STATUS.PATH}","serverZones_Info", {#ZONE}]'
            -
              name: 'responses 5xx for server zone {#ZONE}'
              type: DEPENDENT
              key: 'server_responses_5xx[{#ZONE}]'
              delay: '0'
              applications:
                -
                  name: serverZones_info
              preprocessing:
                -
                  type: JSONPATH
                  parameters:
                    - $.responses
                -
                  type: JSONPATH
                  parameters:
                    - $.5xx
              master_item:
                key: 'nginx_serverZones.py[{$NGINX.VTS_STATUS.SCHEME}, "{HOST.CONN}","{$NGINX.VTS_STATUS.PORT}","{$NGINX.VTS_STATUS.PATH}","serverZones_Info", {#ZONE}]'
            -
              name: 'Total Number of Responses {#ZONE}'
              type: CALCULATED
              key: 'Total_Number_of_Responses[{#ZONE}]'
              params: 'last(responses_1xx[{#ZONE}])+last(responses_2xx[{#ZONE}])+last(responses_3xx[{#ZONE}])+last(responses_4xx[{#ZONE}])+last(responses_5xx[{#ZONE}])'
              applications:
                -
                  name: serverZones_info
          trigger_prototypes:
            -
              expression: '({Nginx VTS monitoring:server_responses_2xx[{#ZONE}].delta(60m)}+{Nginx VTS monitoring:server_responses_3xx[{#ZONE}].delta(60m)})*100/({Nginx VTS monitoring:server_responses_1xx[{#ZONE}].delta(60m)}+{Nginx VTS monitoring:server_responses_2xx[{#ZONE}].delta(60m)}+{Nginx VTS monitoring:server_responses_3xx[{#ZONE}].delta(60m)}+{Nginx VTS monitoring:server_responses_4xx[{#ZONE}].delta(60m)}+{Nginx VTS monitoring:server_responses_5xx[{#ZONE}].delta(60m)}) < 80'
              name: '200 response Code ratio in server zone {#ZONE} in last 1 hour is less 80%'
              priority: DISASTER
              dependencies:
                -
                  name: 'Total number of requests is less than 100000 in last 1 hour'
                  expression: '{Nginx VTS monitoring:RequestsConnections.delta(60m)}<100000'
            -
              expression: '({Nginx VTS monitoring:server_responses_2xx[{#ZONE}].delta(60m)}+{Nginx VTS monitoring:server_responses_3xx[{#ZONE}].delta(60m)})*100/({Nginx VTS monitoring:server_responses_1xx[{#ZONE}].delta(60m)}+{Nginx VTS monitoring:server_responses_2xx[{#ZONE}].delta(60m)}+{Nginx VTS monitoring:server_responses_3xx[{#ZONE}].delta(60m)}+{Nginx VTS monitoring:server_responses_4xx[{#ZONE}].delta(60m)}+{Nginx VTS monitoring:server_responses_5xx[{#ZONE}].delta(60m)}) < 90'
              name: '200 response Code ratio in server zone {#ZONE} in last 1 hour is less 90%'
              priority: HIGH
              dependencies:
                -
                  name: 'Total number of requests is less than 100000 in last 1 hour'
                  expression: '{Nginx VTS monitoring:RequestsConnections.delta(60m)}<100000'
          lld_macro_paths:
            -
              lld_macro: '{#ZONE}'
              path: $.Zone
        -
          name: upStreamZones_List
          type: EXTERNAL
          key: 'nginx_serverZones.py[{$NGINX.VTS_STATUS.SCHEME}, "{HOST.CONN}","{$NGINX.VTS_STATUS.PORT}","{$NGINX.VTS_STATUS.PATH}","upStreamZones_List"]'
          lifetime: '0'
          item_prototypes:
            -
              name: 'upstream_Info  {#ZONE}'
              type: EXTERNAL
              key: 'nginx_serverZones.py[{$NGINX.VTS_STATUS.SCHEME}, "{HOST.CONN}","{$NGINX.VTS_STATUS.PORT}","{$NGINX.VTS_STATUS.PATH}","upstream_Info", {#ZONE}]'
              trends: '0'
              value_type: TEXT
              applications:
                -
                  name: upstream_info
            -
              name: 'Received traffic for upstream {#ZONE}'
              type: DEPENDENT
              key: 'upstream_inBytes[{#ZONE}]'
              delay: '0'
              units: B
              applications:
                -
                  name: upstream_info
              preprocessing:
                -
                  type: JSONPATH
                  parameters:
                    - $.inBytes
              master_item:
                key: 'nginx_serverZones.py[{$NGINX.VTS_STATUS.SCHEME}, "{HOST.CONN}","{$NGINX.VTS_STATUS.PORT}","{$NGINX.VTS_STATUS.PATH}","upstream_Info", {#ZONE}]'
            -
              name: 'Sent traffic for upstream {#ZONE}'
              type: DEPENDENT
              key: 'upstream_outBytes[{#ZONE}]'
              delay: '0'
              units: B
              applications:
                -
                  name: upstream_info
              preprocessing:
                -
                  type: JSONPATH
                  parameters:
                    - $.outBytes
              master_item:
                key: 'nginx_serverZones.py[{$NGINX.VTS_STATUS.SCHEME}, "{HOST.CONN}","{$NGINX.VTS_STATUS.PORT}","{$NGINX.VTS_STATUS.PATH}","upstream_Info", {#ZONE}]'
            -
              name: 'Received per Second traffic for upstream {#ZONE}'
              type: DEPENDENT
              key: 'upstream_rcvdps[{#ZONE}]'
              delay: '0'
              applications:
                -
                  name: upstream_info
              preprocessing:
                -
                  type: CHANGE_PER_SECOND
                  parameters:
                    - ''
              master_item:
                key: 'upstream_inBytes[{#ZONE}]'
            -
              name: 'total requests for upstream {#ZONE}'
              type: DEPENDENT
              key: 'upstream_requestCounter[{#ZONE}]'
              delay: '0'
              applications:
                -
                  name: upstream_info
              preprocessing:
                -
                  type: JSONPATH
                  parameters:
                    - $.requestCounter
              master_item:
                key: 'nginx_serverZones.py[{$NGINX.VTS_STATUS.SCHEME}, "{HOST.CONN}","{$NGINX.VTS_STATUS.PORT}","{$NGINX.VTS_STATUS.PATH}","upstream_Info", {#ZONE}]'
            -
              name: 'number of 1xx responses for upstream {#ZONE}'
              type: DEPENDENT
              key: 'upstream_responses_1xx[{#ZONE}]'
              delay: '0'
              applications:
                -
                  name: upstream_info
              preprocessing:
                -
                  type: JSONPATH
                  parameters:
                    - $.responses
                -
                  type: JSONPATH
                  parameters:
                    - $.1xx
              master_item:
                key: 'nginx_serverZones.py[{$NGINX.VTS_STATUS.SCHEME}, "{HOST.CONN}","{$NGINX.VTS_STATUS.PORT}","{$NGINX.VTS_STATUS.PATH}","upstream_Info", {#ZONE}]'
            -
              name: 'number of 2xx responses for upstream {#ZONE}'
              type: DEPENDENT
              key: 'upstream_responses_2xx[{#ZONE}]'
              delay: '0'
              applications:
                -
                  name: upstream_info
              preprocessing:
                -
                  type: JSONPATH
                  parameters:
                    - $.responses
                -
                  type: JSONPATH
                  parameters:
                    - $.2xx
              master_item:
                key: 'nginx_serverZones.py[{$NGINX.VTS_STATUS.SCHEME}, "{HOST.CONN}","{$NGINX.VTS_STATUS.PORT}","{$NGINX.VTS_STATUS.PATH}","upstream_Info", {#ZONE}]'
            -
              name: 'number of 3xx responses for upstream {#ZONE}'
              type: DEPENDENT
              key: 'upstream_responses_3xx[{#ZONE}]'
              delay: '0'
              applications:
                -
                  name: upstream_info
              preprocessing:
                -
                  type: JSONPATH
                  parameters:
                    - $.responses
                -
                  type: JSONPATH
                  parameters:
                    - $.3xx
              master_item:
                key: 'nginx_serverZones.py[{$NGINX.VTS_STATUS.SCHEME}, "{HOST.CONN}","{$NGINX.VTS_STATUS.PORT}","{$NGINX.VTS_STATUS.PATH}","upstream_Info", {#ZONE}]'
            -
              name: 'number of 4xx responses for upstream {#ZONE}'
              type: DEPENDENT
              key: 'upstream_responses_4xx[{#ZONE}]'
              delay: '0'
              applications:
                -
                  name: upstream_info
              preprocessing:
                -
                  type: JSONPATH
                  parameters:
                    - $.responses
                -
                  type: JSONPATH
                  parameters:
                    - $.4xx
              master_item:
                key: 'nginx_serverZones.py[{$NGINX.VTS_STATUS.SCHEME}, "{HOST.CONN}","{$NGINX.VTS_STATUS.PORT}","{$NGINX.VTS_STATUS.PATH}","upstream_Info", {#ZONE}]'
            -
              name: 'number of 5xx responses for upstream {#ZONE}'
              type: DEPENDENT
              key: 'upstream_responses_5xx[{#ZONE}]'
              delay: '0'
              applications:
                -
                  name: upstream_info
              preprocessing:
                -
                  type: JSONPATH
                  parameters:
                    - $.responses
                -
                  type: JSONPATH
                  parameters:
                    - $.5xx
              master_item:
                key: 'nginx_serverZones.py[{$NGINX.VTS_STATUS.SCHEME}, "{HOST.CONN}","{$NGINX.VTS_STATUS.PORT}","{$NGINX.VTS_STATUS.PATH}","upstream_Info", {#ZONE}]'
            -
              name: 'Request per Second for upstream {#ZONE}'
              type: DEPENDENT
              key: 'Upstream_RPS[{#ZONE}]'
              delay: '0'
              applications:
                -
                  name: upstream_info
              preprocessing:
                -
                  type: CHANGE_PER_SECOND
                  parameters:
                    - ''
              master_item:
                key: 'upstream_requestCounter[{#ZONE}]'
            -
              name: 'Sent per Second traffic for upstream {#ZONE}'
              type: DEPENDENT
              key: 'upstream_Sentps[{#ZONE}]'
              delay: '0'
              preprocessing:
                -
                  type: CHANGE_PER_SECOND
                  parameters:
                    - ''
              master_item:
                key: 'upstream_outBytes[{#ZONE}]'
            -
              name: 'status of upstream {#ZONE}'
              type: DEPENDENT
              key: 'upstream_status[{#ZONE}]'
              delay: '0'
              description: |
                1 is up
                0 is down
              applications:
                -
                  name: upstream_info
              preprocessing:
                -
                  type: JSONPATH
                  parameters:
                    - $.down
                -
                  type: JAVASCRIPT
                  parameters:
                    - |
                      if (value == "false") {
                        return 1;
                      } else {
                        return 0;
                      }
              master_item:
                key: 'nginx_serverZones.py[{$NGINX.VTS_STATUS.SCHEME}, "{HOST.CONN}","{$NGINX.VTS_STATUS.PORT}","{$NGINX.VTS_STATUS.PATH}","upstream_Info", {#ZONE}]'
              trigger_prototypes:
                -
                  expression: '{max(10m)}=0'
                  name: 'Upstream {#ZONE} is down for 10m'
                  priority: DISASTER
                  dependencies:
                    -
                      name: 'Upstream {#ZONE} is down for 15m'
                      expression: '{Nginx VTS monitoring:upstream_status[{#ZONE}].max(15m)}=0'
                -
                  expression: '{max(15m)}=0'
                  name: 'Upstream {#ZONE} is down for 15m'
                  priority: DISASTER
          trigger_prototypes:
            -
              expression: '({Nginx VTS monitoring:upstream_responses_2xx[{#ZONE}].delta(60m)}+{Nginx VTS monitoring:upstream_responses_3xx[{#ZONE}].delta(60m)})*100/({Nginx VTS monitoring:upstream_responses_1xx[{#ZONE}].delta(60m)}+{Nginx VTS monitoring:upstream_responses_2xx[{#ZONE}].delta(60m)}+{Nginx VTS monitoring:upstream_responses_3xx[{#ZONE}].delta(60m)}+{Nginx VTS monitoring:upstream_responses_4xx[{#ZONE}].delta(60m)}+{Nginx VTS monitoring:upstream_responses_5xx[{#ZONE}].delta(60m)}) < 80'
              name: '200 response Code ratio in upstream {#ZONE} in last 1 hour is less than 80%'
              priority: DISASTER
              dependencies:
                -
                  name: 'Total number of requests is less than 100000 in last 1 hour'
                  expression: '{Nginx VTS monitoring:RequestsConnections.delta(60m)}<100000'
            -
              expression: '({Nginx VTS monitoring:upstream_responses_2xx[{#ZONE}].delta(60m)}+{Nginx VTS monitoring:upstream_responses_3xx[{#ZONE}].delta(60m)})*100/({Nginx VTS monitoring:upstream_responses_1xx[{#ZONE}].delta(60m)}+{Nginx VTS monitoring:upstream_responses_2xx[{#ZONE}].delta(60m)}+{Nginx VTS monitoring:upstream_responses_3xx[{#ZONE}].delta(60m)}+{Nginx VTS monitoring:upstream_responses_4xx[{#ZONE}].delta(60m)}+{Nginx VTS monitoring:upstream_responses_5xx[{#ZONE}].delta(60m)}) < 90'
              name: '200 response Code ratio in upstream {#ZONE} in last 1 hour is less than 90%'
              priority: HIGH
              dependencies:
                -
                  name: '200 response Code ratio in upstream {#ZONE} in last 1 hour is less than 80%'
                  expression: '({Nginx VTS monitoring:upstream_responses_2xx[{#ZONE}].delta(60m)}+{Nginx VTS monitoring:upstream_responses_3xx[{#ZONE}].delta(60m)})*100/({Nginx VTS monitoring:upstream_responses_1xx[{#ZONE}].delta(60m)}+{Nginx VTS monitoring:upstream_responses_2xx[{#ZONE}].delta(60m)}+{Nginx VTS monitoring:upstream_responses_3xx[{#ZONE}].delta(60m)}+{Nginx VTS monitoring:upstream_responses_4xx[{#ZONE}].delta(60m)}+{Nginx VTS monitoring:upstream_responses_5xx[{#ZONE}].delta(60m)}) < 80'
                -
                  name: 'Total number of requests is less than 100000 in last 1 hour'
                  expression: '{Nginx VTS monitoring:RequestsConnections.delta(60m)}<100000'
          lld_macro_paths:
            -
              lld_macro: '{#ZONE}'
              path: $.Zone
        -
          name: 'Block devices discovery'
          type: DEPENDENT
          key: vfs.dev.discovery
          delay: '0'
          filter:
            evaltype: AND
            conditions:
              -
                macro: '{#DEVNAME}'
                value: '{$VFS.DEV.DEVNAME.NOT_MATCHES}'
                operator: NOT_MATCHES_REGEX
                formulaid: A
              -
                macro: '{#DEVNAME}'
                value: '{$VFS.DEV.DEVNAME.MATCHES}'
                formulaid: B
          item_prototypes:
            -
              name: '{#DEVNAME}: Active IO'
              type: DEPENDENT
              key: 'vfs.dev.active_io[{#DEVNAME}]'
              delay: '0'
              history: 7d
              description: |
                Number of I/Os currently in progress.
                The only field that should go to zero. Incremented as requests are given to appropriate struct request_queue and decremented as they finish.
                Field #12
              application_prototypes:
                -
                  name: 'Disk {#DEVNAME}'
              preprocessing:
                -
                  type: JSONPATH
                  parameters:
                    - '$.values[''{#DEVNAME}''][11]'
              master_item:
                key: 'vfs.file.contents[/proc/diskstats]'
              trigger_prototypes:
                -
                  expression: '{last()}>{$IOPS_CRITICAL}'
                  name: 'Active IO of {#DEVNAME}: is more than {$IOPS_CRITICAL}'
                  priority: DISASTER
            -
              name: '{#DEVNAME}: Avg queue size'
              type: DEPENDENT
              key: 'vfs.dev.queue_size[{#DEVNAME}]'
              delay: '0'
              history: 7d
              value_type: FLOAT
              description: 'Current average disk queue, the number of requests outstanding on the disk at the time the performance data is collected.'
              application_prototypes:
                -
                  name: 'Disk {#DEVNAME}'
              preprocessing:
                -
                  type: JSONPATH
                  parameters:
                    - '$.values[''{#DEVNAME}''][13]'
                -
                  type: CHANGE_PER_SECOND
                  parameters:
                    - ''
                -
                  type: MULTIPLIER
                  parameters:
                    - '0.001'
              master_item:
                key: 'vfs.file.contents[/proc/diskstats]'
            -
              name: '{#DEVNAME}: Read req avg wait'
              type: CALCULATED
              key: 'vfs.dev.read.await[{#DEVNAME}]'
              history: 7d
              value_type: FLOAT
              units: '!ms'
              params: '(last("vfs.dev.read.time.rate[{#DEVNAME}]")/(last("vfs.dev.read.rate[{#DEVNAME}]")+(last("vfs.dev.read.rate[{#DEVNAME}]")=0)))*1000*(last("vfs.dev.read.rate[{#DEVNAME}]") > 0)'
              description: 'This formula contains two boolean expressions that evaluates to 1 or 0 in order to set calculated metric to zero and to avoid division by zero exception.'
              application_prototypes:
                -
                  name: 'Disk {#DEVNAME}'
            -
              name: '{#DEVNAME}: Disk read bytes'
              type: DEPENDENT
              key: 'vfs.dev.read.bytes[{#DEVNAME}]'
              delay: '0'
              history: 7d
              units: B/sec
              description: |
                This is the total number of sectors read successfully.
                Sector size is 512 (kernel hardcoded value)
              application_prototypes:
                -
                  name: 'Disk {#DEVNAME}'
              preprocessing:
                -
                  type: JSONPATH
                  parameters:
                    - '$.values[''{#DEVNAME}''][5]'
                -
                  type: CHANGE_PER_SECOND
                  parameters:
                    - ''
                -
                  type: MULTIPLIER
                  parameters:
                    - '512'
              master_item:
                key: 'vfs.file.contents[/proc/diskstats]'
            -
              name: '{#DEVNAME}: Disk merged reads'
              type: DEPENDENT
              key: 'vfs.dev.read.merges[{#DEVNAME}]'
              delay: '0'
              history: 7d
              value_type: FLOAT
              units: '!r/s'
              description: |
                Number of reads merged.
                Reads and writes which are adjacent to each other may be merged for efficiency. Thus two 4K reads may become one 8K read before it is ultimately handed to the disk, and so it will be counted (and queued) as only one I/O.  This field lets you know how often this was done.
              application_prototypes:
                -
                  name: 'Disk {#DEVNAME}'
              preprocessing:
                -
                  type: JSONPATH
                  parameters:
                    - '$.values[''{#DEVNAME}''][4]'
                -
                  type: CHANGE_PER_SECOND
                  parameters:
                    - ''
              master_item:
                key: 'vfs.file.contents[/proc/diskstats]'
            -
              name: '{#DEVNAME}: Disk read ops/s'
              type: DEPENDENT
              key: 'vfs.dev.read.rate[{#DEVNAME}]'
              delay: '0'
              history: 7d
              value_type: FLOAT
              units: '!r/s'
              description: 'r/s. The number (after merges) of read requests completed per second for the device.'
              application_prototypes:
                -
                  name: 'Disk {#DEVNAME}'
              preprocessing:
                -
                  type: JSONPATH
                  parameters:
                    - '$.values[''{#DEVNAME}''][3]'
                -
                  type: CHANGE_PER_SECOND
                  parameters:
                    - ''
              master_item:
                key: 'vfs.file.contents[/proc/diskstats]'
            -
              name: '{#DEVNAME}: Disk read time (rate)'
              type: DEPENDENT
              key: 'vfs.dev.read.time.rate[{#DEVNAME}]'
              delay: '0'
              history: 7d
              value_type: FLOAT
              description: 'Rate of total read time counter. Used in r_await calculation'
              applications:
                -
                  name: 'Zabbix raw items'
              preprocessing:
                -
                  type: JSONPATH
                  parameters:
                    - '$.values[''{#DEVNAME}''][6]'
                -
                  type: CHANGE_PER_SECOND
                  parameters:
                    - ''
                -
                  type: MULTIPLIER
                  parameters:
                    - '0.001'
              master_item:
                key: 'vfs.file.contents[/proc/diskstats]'
            -
              name: '{#DEVNAME}: Disk utilization'
              type: DEPENDENT
              key: 'vfs.dev.util[{#DEVNAME}]'
              delay: '0'
              history: 7d
              value_type: FLOAT
              units: '%'
              description: 'This item is the percentage of elapsed time that the selected disk drive was busy servicing read or writes requests.'
              application_prototypes:
                -
                  name: 'Disk {#DEVNAME}'
              preprocessing:
                -
                  type: JSONPATH
                  parameters:
                    - '$.values[''{#DEVNAME}''][12]'
                -
                  type: CHANGE_PER_SECOND
                  parameters:
                    - ''
                -
                  type: MULTIPLIER
                  parameters:
                    - '0.1'
              master_item:
                key: 'vfs.file.contents[/proc/diskstats]'
            -
              name: '{#DEVNAME}: Write req avg wait'
              type: CALCULATED
              key: 'vfs.dev.write.await[{#DEVNAME}]'
              history: 7d
              value_type: FLOAT
              units: '!ms'
              params: '(last("vfs.dev.write.time.rate[{#DEVNAME}]")/(last("vfs.dev.write.rate[{#DEVNAME}]")+(last("vfs.dev.write.rate[{#DEVNAME}]")=0)))*1000*(last("vfs.dev.write.rate[{#DEVNAME}]") > 0)'
              description: 'This formula contains two boolean expressions that evaluates to 1 or 0 in order to set calculated metric to zero and to avoid division by zero exception.'
              application_prototypes:
                -
                  name: 'Disk {#DEVNAME}'
            -
              name: '{#DEVNAME}: Disk write bytes'
              type: DEPENDENT
              key: 'vfs.dev.write.bytes[{#DEVNAME}]'
              delay: '0'
              history: 7d
              units: B/sec
              description: |
                This is the total number of sectors written successfully.
                Sector size is 512 (kernel hardcoded value)
              application_prototypes:
                -
                  name: 'Disk {#DEVNAME}'
              preprocessing:
                -
                  type: JSONPATH
                  parameters:
                    - '$.values[''{#DEVNAME}''][9]'
                -
                  type: CHANGE_PER_SECOND
                  parameters:
                    - ''
                -
                  type: MULTIPLIER
                  parameters:
                    - '512'
              master_item:
                key: 'vfs.file.contents[/proc/diskstats]'
            -
              name: '{#DEVNAME}: Disk merged writes'
              type: DEPENDENT
              key: 'vfs.dev.write.merges[{#DEVNAME}]'
              delay: '0'
              history: 7d
              value_type: FLOAT
              units: '!r/s'
              description: |
                Number of writes merged.
                Reads and writes which are adjacent to each other may be merged for efficiency. Thus two 4K reads may become one 8K read before it is ultimately handed to the disk, and so it will be counted (and queued) as only one I/O.  This field lets you know how often this was done.
              application_prototypes:
                -
                  name: 'Disk {#DEVNAME}'
              preprocessing:
                -
                  type: JSONPATH
                  parameters:
                    - '$.values[''{#DEVNAME}''][8]'
                -
                  type: CHANGE_PER_SECOND
                  parameters:
                    - ''
              master_item:
                key: 'vfs.file.contents[/proc/diskstats]'
            -
              name: '{#DEVNAME}: Disk write ops/s'
              type: DEPENDENT
              key: 'vfs.dev.write.rate[{#DEVNAME}]'
              delay: '0'
              history: 7d
              value_type: FLOAT
              units: '!w/s'
              description: 'w/s. The number (after merges) of write requests completed per second for the device.'
              application_prototypes:
                -
                  name: 'Disk {#DEVNAME}'
              preprocessing:
                -
                  type: JSONPATH
                  parameters:
                    - '$.values[''{#DEVNAME}''][7]'
                -
                  type: CHANGE_PER_SECOND
                  parameters:
                    - ''
              master_item:
                key: 'vfs.file.contents[/proc/diskstats]'
            -
              name: '{#DEVNAME}: Disk write time (rate)'
              type: DEPENDENT
              key: 'vfs.dev.write.time.rate[{#DEVNAME}]'
              delay: '0'
              history: 7d
              value_type: FLOAT
              description: 'Rate of total write time counter. Used in w_await calculation'
              applications:
                -
                  name: 'Zabbix raw items'
              preprocessing:
                -
                  type: JSONPATH
                  parameters:
                    - '$.values[''{#DEVNAME}''][10]'
                -
                  type: CHANGE_PER_SECOND
                  parameters:
                    - ''
                -
                  type: MULTIPLIER
                  parameters:
                    - '0.001'
              master_item:
                key: 'vfs.file.contents[/proc/diskstats]'
          trigger_prototypes:
            -
              expression: '{Nginx VTS monitoring:vfs.dev.read.await[{#DEVNAME}].min(15m)} > {$VFS.DEV.READ.AWAIT.WARN:"{#DEVNAME}"} or {Nginx VTS monitoring:vfs.dev.write.await[{#DEVNAME}].min(15m)} > {$VFS.DEV.WRITE.AWAIT.WARN:"{#DEVNAME}"}'
              name: '{#DEVNAME}: Disk read/write request responses are too high (read > {$VFS.DEV.READ.AWAIT.WARN:"{#DEVNAME}"} ms for 15m or write > {$VFS.DEV.WRITE.AWAIT.WARN:"{#DEVNAME}"} ms for 15m)'
              priority: WARNING
              description: 'This trigger might indicate disk {#DEVNAME} saturation.'
              manual_close: 'YES'
          graph_prototypes:
            -
              name: '{#DEVNAME}: Disk average waiting time'
              graph_items:
                -
                  color: 1A7C11
                  item:
                    host: 'Nginx VTS monitoring'
                    key: 'vfs.dev.read.await[{#DEVNAME}]'
                -
                  sortorder: '1'
                  drawtype: GRADIENT_LINE
                  color: 2774A4
                  item:
                    host: 'Nginx VTS monitoring'
                    key: 'vfs.dev.write.await[{#DEVNAME}]'
            -
              name: '{#DEVNAME}: Disk IOPS'
              graph_items:
                -
                  color: 1A7C11
                  item:
                    host: 'Nginx VTS monitoring'
                    key: 'vfs.dev.read.rate[{#DEVNAME}]'
                -
                  sortorder: '1'
                  color: 039BE5
                  item:
                    host: 'Nginx VTS monitoring'
                    key: 'vfs.dev.write.rate[{#DEVNAME}]'
                -
                  sortorder: '2'
                  drawtype: DOTTED_LINE
                  color: 1A7C11
                  item:
                    host: 'Nginx VTS monitoring'
                    key: 'vfs.dev.read.merges[{#DEVNAME}]'
                -
                  sortorder: '3'
                  drawtype: DOTTED_LINE
                  color: 039BE5
                  item:
                    host: 'Nginx VTS monitoring'
                    key: 'vfs.dev.write.merges[{#DEVNAME}]'
            -
              name: '{#DEVNAME}: Disk read/write bytes'
              graph_items:
                -
                  color: 1A7C11
                  item:
                    host: 'Nginx VTS monitoring'
                    key: 'vfs.dev.read.bytes[{#DEVNAME}]'
                -
                  sortorder: '1'
                  color: 2774A4
                  item:
                    host: 'Nginx VTS monitoring'
                    key: 'vfs.dev.write.bytes[{#DEVNAME}]'
            -
              name: '{#DEVNAME}: Disk utilization and queue'
              ymin_type_1: FIXED
              graph_items:
                -
                  color: F44336
                  yaxisside: RIGHT
                  item:
                    host: 'Nginx VTS monitoring'
                    key: 'vfs.dev.queue_size[{#DEVNAME}]'
                -
                  sortorder: '1'
                  drawtype: FILLED_REGION
                  color: 7986CB
                  item:
                    host: 'Nginx VTS monitoring'
                    key: 'vfs.dev.util[{#DEVNAME}]'
                -
                  sortorder: '2'
                  color: FFB300
                  yaxisside: RIGHT
                  item:
                    host: 'Nginx VTS monitoring'
                    key: 'vfs.dev.active_io[{#DEVNAME}]'
          master_item:
            key: 'vfs.file.contents[/proc/diskstats]'
          preprocessing:
            -
              type: JSONPATH
              parameters:
                - $.lld
            -
              type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 1h
        -
          name: 'Mounted filesystem discovery'
          key: vfs.fs.discovery
          delay: 1h
          filter:
            evaltype: AND
            conditions:
              -
                macro: '{#FSNAME}'
                value: '{$VFS.FS.FSNAME.NOT_MATCHES}'
                operator: NOT_MATCHES_REGEX
                formulaid: A
              -
                macro: '{#FSNAME}'
                value: '{$VFS.FS.FSNAME.MATCHES}'
                formulaid: B
              -
                macro: '{#FSTYPE}'
                value: '{$VFS.FS.FSTYPE.NOT_MATCHES}'
                operator: NOT_MATCHES_REGEX
                formulaid: C
              -
                macro: '{#FSTYPE}'
                value: '{$VFS.FS.FSTYPE.MATCHES}'
                formulaid: D
          description: 'Discovery of file systems of different types.'
          item_prototypes:
            -
              name: '{#FSNAME}: Free inodes in %'
              key: 'vfs.fs.inode[{#FSNAME},pfree]'
              history: 7d
              value_type: FLOAT
              units: '%'
              application_prototypes:
                -
                  name: 'Filesystem {#FSNAME}'
              trigger_prototypes:
                -
                  expression: '{min(5m)}<{$VFS.FS.INODE.PFREE.MIN.CRIT:"{#FSNAME}"}'
                  name: '{#FSNAME}: Running out of free inodes (free < {$VFS.FS.INODE.PFREE.MIN.CRIT:"{#FSNAME}"}%)'
                  opdata: 'Free inodes: {ITEM.LASTVALUE1}'
                  priority: AVERAGE
                  description: |
                    It may become impossible to write to disk if there are no index nodes left.
                    As symptoms, 'No space left on device' or 'Disk is full' errors may be seen even though free space is available.
                -
                  expression: '{min(5m)}<{$VFS.FS.INODE.PFREE.MIN.WARN:"{#FSNAME}"}'
                  name: '{#FSNAME}: Running out of free inodes (free < {$VFS.FS.INODE.PFREE.MIN.WARN:"{#FSNAME}"}%)'
                  opdata: 'Free inodes: {ITEM.LASTVALUE1}'
                  priority: WARNING
                  description: |
                    It may become impossible to write to disk if there are no index nodes left.
                    As symptoms, 'No space left on device' or 'Disk is full' errors may be seen even though free space is available.
                  dependencies:
                    -
                      name: '{#FSNAME}: Running out of free inodes (free < {$VFS.FS.INODE.PFREE.MIN.CRIT:"{#FSNAME}"}%)'
                      expression: '{Nginx VTS monitoring:vfs.fs.inode[{#FSNAME},pfree].min(5m)}<{$VFS.FS.INODE.PFREE.MIN.CRIT:"{#FSNAME}"}'
            -
              name: '{#FSNAME}: Space utilization'
              key: 'vfs.fs.size[{#FSNAME},pused]'
              history: 7d
              value_type: FLOAT
              units: '%'
              description: 'Space utilization in % for {#FSNAME}'
              application_prototypes:
                -
                  name: 'Filesystem {#FSNAME}'
            -
              name: '{#FSNAME}: Total space'
              key: 'vfs.fs.size[{#FSNAME},total]'
              history: 7d
              units: B
              description: 'Total space in Bytes'
              application_prototypes:
                -
                  name: 'Filesystem {#FSNAME}'
            -
              name: '{#FSNAME}: Used space'
              key: 'vfs.fs.size[{#FSNAME},used]'
              history: 7d
              units: B
              description: 'Used storage in Bytes'
              application_prototypes:
                -
                  name: 'Filesystem {#FSNAME}'
          trigger_prototypes:
            -
              expression: |
                {Nginx VTS monitoring:vfs.fs.size[{#FSNAME},pused].last()}>{$VFS.FS.PUSED.MAX.CRIT:"{#FSNAME}"} and
                (({Nginx VTS monitoring:vfs.fs.size[{#FSNAME},total].last()}-{Nginx VTS monitoring:vfs.fs.size[{#FSNAME},used].last()})<10G or {Nginx VTS monitoring:vfs.fs.size[{#FSNAME},pused].timeleft(2h,,120)}<2d)
              recovery_mode: RECOVERY_EXPRESSION
              recovery_expression: |
                {Nginx VTS monitoring:vfs.fs.size[{#FSNAME},pused].last()}<
                ({$VFS.FS.PUSED.MAX.CRIT:"{#FSNAME}"}-0.25*(100-({$VFS.FS.PUSED.MAX.CRIT:"{#FSNAME}"})))
              name: '{#FSNAME}: Disk space is critically low (used > {$VFS.FS.PUSED.MAX.CRIT:"{#FSNAME}"}%)'
              opdata: 'Space used: {ITEM.LASTVALUE3} of {ITEM.LASTVALUE2} ({ITEM.LASTVALUE1})'
              priority: AVERAGE
              description: |
                Two conditions should match: First, space utilization should be above {$VFS.FS.PUSED.MAX.CRIT:"{#FSNAME}"}.
                 Second condition should be one of the following:
                 - The disk free space is less than 10G.
                 - The disk will be full in less than 2 days.
              manual_close: 'YES'
            -
              expression: |
                {Nginx VTS monitoring:vfs.fs.size[{#FSNAME},pused].last()}>{$VFS.FS.PUSED.MAX.WARN:"{#FSNAME}"} and
                (({Nginx VTS monitoring:vfs.fs.size[{#FSNAME},total].last()}-{Nginx VTS monitoring:vfs.fs.size[{#FSNAME},used].last()})<20G or {Nginx VTS monitoring:vfs.fs.size[{#FSNAME},pused].timeleft(2h,,120)}<3d)
              recovery_mode: RECOVERY_EXPRESSION
              recovery_expression: |
                {Nginx VTS monitoring:vfs.fs.size[{#FSNAME},pused].last()}<
                ({$VFS.FS.PUSED.MAX.WARN:"{#FSNAME}"}-0.25*(100-{$VFS.FS.PUSED.MAX.WARN:"{#FSNAME}"}))
              name: '{#FSNAME}: Disk space is low (used > {$VFS.FS.PUSED.MAX.WARN:"{#FSNAME}"}%)'
              opdata: 'Space used: {ITEM.LASTVALUE3} of {ITEM.LASTVALUE2} ({ITEM.LASTVALUE1})'
              priority: WARNING
              description: |
                Two conditions should match: First, space utilization should be above {$VFS.FS.PUSED.MAX.WARN:"{#FSNAME}"}.
                 Second condition should be one of the following:
                 - The disk free space is less than 20G.
                 - The disk will be full in less than 3 days.
              manual_close: 'YES'
              dependencies:
                -
                  name: '{#FSNAME}: Disk space is critically low (used > {$VFS.FS.PUSED.MAX.CRIT:"{#FSNAME}"}%)'
                  expression: |
                    {Nginx VTS monitoring:vfs.fs.size[{#FSNAME},pused].last()}>{$VFS.FS.PUSED.MAX.CRIT:"{#FSNAME}"} and
                    (({Nginx VTS monitoring:vfs.fs.size[{#FSNAME},total].last()}-{Nginx VTS monitoring:vfs.fs.size[{#FSNAME},used].last()})<10G or {Nginx VTS monitoring:vfs.fs.size[{#FSNAME},pused].timeleft(2h,,120)}<2d)
                  recovery_expression: |
                    {Nginx VTS monitoring:vfs.fs.size[{#FSNAME},pused].last()}<
                    ({$VFS.FS.PUSED.MAX.CRIT:"{#FSNAME}"}-0.25*(100-({$VFS.FS.PUSED.MAX.CRIT:"{#FSNAME}"})))
          graph_prototypes:
            -
              name: '{#FSNAME}: Disk space usage'
              width: '600'
              height: '340'
              show_work_period: 'NO'
              show_triggers: 'NO'
              ymin_type_1: FIXED
              graph_items:
                -
                  drawtype: FILLED_REGION
                  color: '969696'
                  calc_fnc: ALL
                  type: GRAPH_SUM
                  item:
                    host: 'Nginx VTS monitoring'
                    key: 'vfs.fs.size[{#FSNAME},total]'
                -
                  sortorder: '1'
                  drawtype: FILLED_REGION
                  color: C80000
                  calc_fnc: ALL
                  item:
                    host: 'Nginx VTS monitoring'
                    key: 'vfs.fs.size[{#FSNAME},used]'
                -
                  sortorder: '2'
                  color: 2774A4
                  yaxisside: RIGHT
                  item:
                    host: 'Nginx VTS monitoring'
                    key: 'vfs.fs.inode[{#FSNAME},pfree]'
      macros:
        -
          macro: '{$CPU_IOWAIT_CRITICAL}'
          value: '100'
        -
          macro: '{$HIT_RATE_CRITICAL}'
          value: '80'
        -
          macro: '{$HIT_RATE_WARN}'
          value: '90'
        -
          macro: '{$INBOUND_TRAFFIC_CRIT}'
          value: '8000000000'
        -
          macro: '{$IOPS_CRITICAL}'
          value: '100'
        -
          macro: '{$NGINX.VTS_STATUS.PATH}'
          value: cache_status
        -
          macro: '{$NGINX.VTS_STATUS.PORT}'
          value: '8080'
        -
          macro: '{$NGINX.VTS_STATUS.SCHEME}'
          value: http
        -
          macro: '{$OUTBOUND_TRAFFIC_CRIT}'
          value: '8000000000'
        -
          macro: '{$WAITING_CONNECTIONS_CRITICAL}'
          value: '100'
  triggers:
    -
      expression: '{Nginx VTS monitoring:proc.num.last()}/{Nginx VTS monitoring:kernel.maxproc.last()}*100>80'
      name: 'Getting closer to process limit (over 80% used)'
      opdata: '{ITEM.LASTVALUE1} active, {ITEM.LASTVALUE2} limit.'
      priority: WARNING
    -
      expression: '{Nginx VTS monitoring:system.swap.size[,pfree].min(5m)}<{$SWAP.PFREE.MIN.WARN} and {Nginx VTS monitoring:system.swap.size[,total].last()}>0'
      name: 'High swap space usage ( less than {$SWAP.PFREE.MIN.WARN}% free)'
      opdata: 'Free: {ITEM.LASTVALUE1}, total: {ITEM.LASTVALUE2}'
      priority: WARNING
      description: 'This trigger is ignored, if there is no swap configured'
      dependencies:
        -
          name: 'High memory utilization ( >{$MEMORY.UTIL.MAX}% for 5m)'
          expression: '{Nginx VTS monitoring:vm.memory.size[pavailable].min(5m)}>{$MEMORY.UTIL.MAX}'
        -
          name: 'Lack of available memory ( < {$MEMORY.AVAILABLE.MIN} of {ITEM.VALUE2})'
          expression: '{Nginx VTS monitoring:vm.memory.size[available].min(5m)}<{$MEMORY.AVAILABLE.MIN} and {Nginx VTS monitoring:vm.memory.size[total].last()}>0'
    -
      expression: '{Nginx VTS monitoring:vm.memory.size[available].min(5m)}<{$MEMORY.AVAILABLE.MIN} and {Nginx VTS monitoring:vm.memory.size[total].last()}>0'
      name: 'Lack of available memory ( < {$MEMORY.AVAILABLE.MIN} of {ITEM.VALUE2})'
      opdata: 'Available: {ITEM.LASTVALUE1}, total: {ITEM.LASTVALUE2}'
      priority: AVERAGE
    -
      expression: |
        {Nginx VTS monitoring:system.cpu.load[all,avg1].min(5m)}/{Nginx VTS monitoring:system.cpu.num.last()}>{$LOAD_AVG_PER_CPU.MAX.WARN}
        and {Nginx VTS monitoring:system.cpu.load[all,avg5].last()}>0
        and {Nginx VTS monitoring:system.cpu.load[all,avg15].last()}>0
      name: 'Load average is too high (per CPU load over {$LOAD_AVG_PER_CPU.MAX.WARN} for 5m)'
      opdata: 'Load averages(1m 5m 15m): ({ITEM.LASTVALUE1} {ITEM.LASTVALUE3} {ITEM.LASTVALUE4}), # of CPUs: {ITEM.LASTVALUE2}'
      priority: AVERAGE
      description: 'Per CPU load average is too high. Your system may be slow to respond.'
  graphs:
    -
      name: Availability
      graph_items:
        -
          sortorder: '1'
          color: 1A7C11
          item:
            host: 'Nginx VTS monitoring'
            key: 'zabbix[host,agent,available]'
    -
      name: 'CPU jumps'
      graph_items:
        -
          color: 1A7C11
          item:
            host: 'Nginx VTS monitoring'
            key: system.cpu.switches
        -
          sortorder: '1'
          color: 2774A4
          item:
            host: 'Nginx VTS monitoring'
            key: system.cpu.intr
    -
      name: 'CPU usage'
      type: STACKED
      ymin_type_1: FIXED
      ymax_type_1: FIXED
      graph_items:
        -
          color: 1A7C11
          item:
            host: 'Nginx VTS monitoring'
            key: 'system.cpu.util[,system]'
        -
          sortorder: '1'
          color: 2774A4
          item:
            host: 'Nginx VTS monitoring'
            key: 'system.cpu.util[,user]'
        -
          sortorder: '2'
          color: F63100
          item:
            host: 'Nginx VTS monitoring'
            key: 'system.cpu.util[,nice]'
        -
          sortorder: '3'
          color: A54F10
          item:
            host: 'Nginx VTS monitoring'
            key: 'system.cpu.util[,iowait]'
        -
          sortorder: '4'
          color: FC6EA3
          item:
            host: 'Nginx VTS monitoring'
            key: 'system.cpu.util[,steal]'
        -
          sortorder: '5'
          color: 6C59DC
          item:
            host: 'Nginx VTS monitoring'
            key: 'system.cpu.util[,interrupt]'
        -
          sortorder: '6'
          color: AC8C14
          item:
            host: 'Nginx VTS monitoring'
            key: 'system.cpu.util[,softirq]'
        -
          sortorder: '7'
          color: 611F27
          item:
            host: 'Nginx VTS monitoring'
            key: 'system.cpu.util[,guest]'
        -
          sortorder: '8'
          color: F230E0
          item:
            host: 'Nginx VTS monitoring'
            key: 'system.cpu.util[,guest_nice]'
    -
      name: 'CPU utilization'
      ymin_type_1: FIXED
      ymax_type_1: FIXED
      graph_items:
        -
          drawtype: GRADIENT_LINE
          color: 1A7C11
          item:
            host: 'Nginx VTS monitoring'
            key: system.cpu.util
    -
      name: 'Memory usage'
      ymin_type_1: FIXED
      graph_items:
        -
          drawtype: FILLED_REGION
          color: C62828
          item:
            host: 'Nginx VTS monitoring'
            key: 'vm.memory.size[total]'
        -
          sortorder: '1'
          drawtype: FILLED_REGION
          color: 2E7D32
          item:
            host: 'Nginx VTS monitoring'
            key: 'vm.memory.size[available]'
    -
      name: Processes
      graph_items:
        -
          color: 1A7C11
          item:
            host: 'Nginx VTS monitoring'
            key: proc.num
        -
          sortorder: '1'
          color: 2774A4
          item:
            host: 'Nginx VTS monitoring'
            key: 'proc.num[,,run]'
        -
          sortorder: '2'
          color: F63100
          item:
            host: 'Nginx VTS monitoring'
            key: kernel.maxproc
    -
      name: 'Swap usage'
      graph_items:
        -
          drawtype: FILLED_REGION
          color: C62828
          item:
            host: 'Nginx VTS monitoring'
            key: 'system.swap.size[,total]'
        -
          sortorder: '1'
          drawtype: FILLED_REGION
          color: 1A7C11
          item:
            host: 'Nginx VTS monitoring'
            key: 'system.swap.size[,free]'
        -
          sortorder: '2'
          color: 2774A4
          yaxisside: RIGHT
          item:
            host: 'Nginx VTS monitoring'
            key: 'system.swap.in[,pages]'
        -
          sortorder: '3'
          color: FFA726
          yaxisside: RIGHT
          item:
            host: 'Nginx VTS monitoring'
            key: 'system.swap.out[,pages]'
    -
      name: 'System load'
      ymin_type_1: FIXED
      graph_items:
        -
          color: 1A7C11
          item:
            host: 'Nginx VTS monitoring'
            key: 'system.cpu.load[all,avg1]'
        -
          sortorder: '1'
          color: 2774A4
          item:
            host: 'Nginx VTS monitoring'
            key: 'system.cpu.load[all,avg5]'
        -
          sortorder: '2'
          color: F63100
          item:
            host: 'Nginx VTS monitoring'
            key: 'system.cpu.load[all,avg15]'
        -
          sortorder: '3'
          color: A54F10
          yaxisside: RIGHT
          item:
            host: 'Nginx VTS monitoring'
            key: system.cpu.num
  value_maps:
    -
      name: 'IF-MIB::ifOperStatus'
      mappings:
        -
          value: '1'
          newvalue: up
        -
          value: '2'
          newvalue: down
        -
          value: '4'
          newvalue: unknown
        -
          value: '5'
          newvalue: dormant
        -
          value: '6'
          newvalue: notPresent
        -
          value: '7'
          newvalue: lowerLayerDown
    -
      name: 'Linux::Interface protocol types'
      mappings:
        -
          value: '0'
          newvalue: 'from KA9Q: NET/ROM pseudo'
        -
          value: '1'
          newvalue: Ethernet
        -
          value: '2'
          newvalue: 'Experimental Ethernet'
        -
          value: '3'
          newvalue: 'AX.25 Level 2'
        -
          value: '4'
          newvalue: 'PROnet token ring'
        -
          value: '5'
          newvalue: Chaosnet
        -
          value: '6'
          newvalue: 'IEEE 802.2 Ethernet/TR/TB'
        -
          value: '7'
          newvalue: ARCnet
        -
          value: '8'
          newvalue: APPLEtalk
        -
          value: '15'
          newvalue: 'Frame Relay DLCI'
        -
          value: '19'
          newvalue: ATM
        -
          value: '23'
          newvalue: 'Metricom STRIP (new IANA id)'
        -
          value: '24'
          newvalue: 'IEEE 1394 IPv4 - RFC 2734'
        -
          value: '27'
          newvalue: EUI-64
        -
          value: '32'
          newvalue: InfiniBand
        -
          value: '256'
          newvalue: ARPHRD_SLIP
        -
          value: '257'
          newvalue: ARPHRD_CSLIP
        -
          value: '258'
          newvalue: ARPHRD_SLIP6
        -
          value: '259'
          newvalue: ARPHRD_CSLIP6
        -
          value: '260'
          newvalue: 'Notional KISS type'
        -
          value: '264'
          newvalue: ARPHRD_ADAPT
        -
          value: '270'
          newvalue: ARPHRD_ROSE
        -
          value: '271'
          newvalue: 'CCITT X.25'
        -
          value: '272'
          newvalue: 'Boards with X.25 in firmware'
        -
          value: '280'
          newvalue: 'Controller Area Network'
        -
          value: '512'
          newvalue: ARPHRD_PPP
        -
          value: '513'
          newvalue: 'Cisco HDLC'
        -
          value: '516'
          newvalue: LAPB
        -
          value: '517'
          newvalue: 'Digital''s DDCMP protocol'
        -
          value: '518'
          newvalue: 'Raw HDLC'
        -
          value: '519'
          newvalue: 'Raw IP'
        -
          value: '768'
          newvalue: 'IPIP tunnel'
        -
          value: '769'
          newvalue: 'IP6IP6 tunnel'
        -
          value: '770'
          newvalue: 'Frame Relay Access Device'
        -
          value: '771'
          newvalue: 'SKIP vif'
        -
          value: '772'
          newvalue: 'Loopback device'
        -
          value: '773'
          newvalue: 'Localtalk device'
        -
          value: '774'
          newvalue: 'Fiber Distributed Data Interface'
        -
          value: '775'
          newvalue: 'AP1000 BIF'
        -
          value: '776'
          newvalue: 'sit0 device - IPv6-in-IPv4'
        -
          value: '777'
          newvalue: 'IP over DDP tunneller'
        -
          value: '778'
          newvalue: 'GRE over IP'
        -
          value: '779'
          newvalue: 'PIMSM register interface'
        -
          value: '780'
          newvalue: 'High Performance Parallel Interface'
        -
          value: '781'
          newvalue: 'Nexus 64Mbps Ash'
        -
          value: '782'
          newvalue: 'Acorn Econet'
        -
          value: '783'
          newvalue: Linux-IrDA
        -
          value: '784'
          newvalue: 'Point to point fibrechannel'
        -
          value: '785'
          newvalue: 'Fibrechannel arbitrated loop'
        -
          value: '786'
          newvalue: 'Fibrechannel public loop'
        -
          value: '787'
          newvalue: 'Fibrechannel fabric'
        -
          value: '800'
          newvalue: 'Magic type ident for TR'
        -
          value: '801'
          newvalue: 'IEEE 802.11'
        -
          value: '802'
          newvalue: 'IEEE 802.11 + Prism2 header'
        -
          value: '803'
          newvalue: 'IEEE 802.11 + radiotap header'
        -
          value: '804'
          newvalue: ARPHRD_IEEE802154
        -
          value: '805'
          newvalue: 'IEEE 802.15.4 network monitor'
        -
          value: '820'
          newvalue: 'PhoNet media type'
        -
          value: '821'
          newvalue: 'PhoNet pipe header'
        -
          value: '822'
          newvalue: 'CAIF media type'
        -
          value: '823'
          newvalue: 'GRE over IPv6'
        -
          value: '824'
          newvalue: 'Netlink header'
        -
          value: '825'
          newvalue: 'IPv6 over LoWPAN'
        -
          value: '826'
          newvalue: 'Vsock monitor header'
    -
      name: zabbix.host.available
      mappings:
        -
          value: '0'
          newvalue: 'not available'
        -
          value: '1'
          newvalue: available
        -
          value: '2'
          newvalue: unknown
    -
      name: 'Zabbix agent ping status'
      mappings:
        -
          value: '1'
          newvalue: Up
